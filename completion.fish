###-begin-firebase-completion-###

# List of all the firebase root commands to be used as the index of following variables
set COMMANDS_INDEX appdistribution:distribute appdistribution:testers:add appdistribution:testers:remove apps:android:sha:create apps:android:sha:delete apps:android:sha:list apps:create apps:list apps:sdkconfig auth:export auth:import completion crashlytics:mappingfile:generateid crashlytics:mappingfile:upload crashlytics:symbols:upload database:get database:instances:create database:instances:list database:profile database:push database:remove database:rules:canary database:rules:get database:rules:list database:rules:release database:rules:stage database:set database:settings:get database:settings:set database:update deploy emulators:exec emulators:export emulators:start experimental:functions:shell experiments:describe experiments:disable experiments:enable experiments:list ext:configure ext:dev:deprecate ext:dev:emulators:exec ext:dev:emulators:start ext:dev:delete ext:dev:init ext:dev:list ext:dev:publish ext:dev:register ext:dev:undeprecate ext:dev:unpublish ext:dev:usage ext:export ext:info ext:install ext:list ext:sources:create ext:uninstall ext:update ext firestore:delete firestore:indexes functions:config:clone functions:config:export functions:config:get functions:config:set functions:config:unset functions:delete functions:deletegcfartifacts functions:list functions:log functions:secrets:access functions:secrets:destroy functions:secrets:get functions:secrets:prune functions:secrets:set functions:shell help hosting:channel:create hosting:channel:delete hosting:channel:deploy hosting:channel:list hosting:channel:open hosting:clone hosting:disable hosting:sites:create hosting:sites:delete hosting:sites:get hosting:sites:list init internaltesting:functions:discover login:add login:ci login:list login:use login logout open projects:addfirebase projects:create projects:list remoteconfig:get remoteconfig:rollback remoteconfig:versions:list serve setup:emulators:database setup:emulators:firestore setup:emulators:pubsub setup:emulators:storage setup:emulators:ui target:apply target:clear target:remove target use

# List of descriptions for associated commands (indices match with items in COMMANDS)
set COMMAND_DESCRIPTIONS "upload a release binary" "add testers to project" "remove testers from a project" "add a SHA certificate hash for a given app id." "delete a SHA certificate hash for a given app id." "list the SHA certificate hashes for a given app id. " "create a new Firebase app. [platform] can be IOS, ANDROID or WEB (case insensitive)." "list the registered apps of a Firebase project. Optionally filter apps by [platform]: IOS, ANDROID or WEB (case insensitive)" "print the Google Services config of a Firebase app. [platform] can be IOS, ANDROID or WEB (case insensitive)" "Export accounts from your Firebase project into a data file" "import users into your Firebase project from a data file(.csv or .json)" "Generate tab-completion code for shell, currently "bash" and "fish" are supported values for shell." "generate a mapping file id and write it to an Android resource file, which will be built into the app" "upload a ProGuard/R8-compatible mapping file to deobfuscate stack traces" "upload symbols for native code, to symbolicate stack traces" "fetch and print JSON data at the specified path" "create a realtime database instance" "list realtime database instances, optionally filtered by a specified location" "profile the Realtime Database and generate a usage report" "add a new JSON object to a list of data in your Firebase" "remove data from your Firebase at the specified path" "mark a staged ruleset as the canary ruleset" "get a realtime database ruleset by id" "list realtime database rulesets" "mark a staged ruleset as the stable ruleset" "create a new realtime database ruleset" "store JSON data at the specified path via STDIN, arg, or file" "read the realtime database setting at path" "set the realtime database setting at path." "update some of the keys for the defined path in your Firebase" "deploy code and assets to your Firebase project" "start the local Firebase emulators, run a test script, then shut down the emulators" "export data from running emulators" "start the local Firebase emulators" "launch full Node shell with emulated functions. (Alias for `firebase functions:shell.)" "enable an experiment on this machine" "disable an experiment on this machine" "enable an experiment on this machine" "" "configure an existing extension instance" "deprecate extension versions that match the version predicate" "deprecated: please use `firebase emulators:exec` instead" "deprecated: please use `firebase emulators:start`" "delete an extension" "initialize files for writing an extension in the current directory" "list all published extensions associated with this publisher ID" "publish a new version of an extension" "register a publisher ID; run this before publishing your first extension." "undeprecate extension versions that match the version predicate" "unpublish an extension" "get usage for an extension" "export all Extension instances installed on a project to a local Firebase directory" "display information about an extension by name (extensionName@x.y.z for a specific version)" "install an official extension if [extensionName] or [extensionName@version] is provided; install a local extension if [localPathOrUrl] or [url#root] is provided; install a published extension (not authored by Firebase) if [publisherId/extensionId] is provided or run with `-i` to see all available extensions." "list all the extensions that are installed in your Firebase project" "create a extension source from sourceLocation" "uninstall an extension that is installed in your Firebase project by instance ID" "update an existing extension instance to the latest version or from a local or URL source" "display information on how to use ext commands and extensions installed to your project" "Delete data from Cloud Firestore." "List indexes in your project's Cloud Firestore database." "clone environment config from another project" "Export environment config as environment variables in dotenv format" "fetch environment config stored at the given path" "set environment config with key=value syntax" "unset environment config at the specified path(s)" "delete one or more Cloud Functions by name or group name." "Deletes all artifacts created by Google Cloud Functions on Google Container Registry." "list all deployed functions in your Firebase project" "read logs from deployed functions" "Access secret value given secret and its version. Defaults to accessing the latest version." "Destroy a secret. Defaults to destroying the latest version." "Get metadata for secret and its versions" "Destroys unused secrets" "Create or update a secret for use in Cloud Functions for Firebase." "launch full Node shell with emulated functions" "display help information" "create a Firebase Hosting channel" "delete a Firebase Hosting channel" "deploy to a specific Firebase Hosting channel" "list all Firebase Hosting channels for your project" "opens the URL for a Firebase Hosting channel" "clone a version from one site to another" "stop serving web traffic to your Firebase Hosting site" "create a Firebase Hosting site" "delete a Firebase Hosting site" "print info about a Firebase Hosting site" "list Firebase Hosting sites" "Interactively configure the current directory as a Firebase project or initialize new features in an already configured Firebase project directory.This command will create or update 'firebase.json' and '.firebaserc' configuration files in the current directory. To initialize a specific Firebase feature, run 'firebase init [feature]'. Valid features are:  - database  - emulators  - firestore  - functions  - hosting  - hosting:github  - remoteconfig  - storage" "discover function triggers defined in the current project directory" "authorize the CLI for an additional account" "generate an access token for use in non-interactive environments" "list authorized CLI accounts" "set the default account to use for this project directory" "log the CLI into Firebase" "log the CLI out of Firebase" "quickly open a browser to relevant project resources" "add Firebase resources to a Google Cloud Platform project" "creates a new Google Cloud Platform project, then adds Firebase resources to the project" "list all Firebase projects you have access to" "get a Firebase project's Remote Config template" "roll back a project's published Remote Config template to the one specified by the provided version number" "get a list of Remote Config template versions that have been published for a Firebase project" "start a local server for your static assets" "downloads the database emulator" "downloads the firestore emulator" "downloads the pubsub emulator" "downloads the storage emulator" "downloads the ui emulator" "apply a deploy target to a resource" "clear all resources from a named resource target" "remove a resource target" "display configured deploy targets for the current project" "set an active Firebase project for your working directory"

# List of options of commands: each row contains all the options of the corresponding command (indices match with items
# in COMMANDS_INDEX)
set OPTIONS "--app --release-notes --release-notes-file --testers --testers-file --groups --groups-file" "--file" "--file" "" "" "" "-a --package-name -b --bundle-id -s --app-store-id" "" "-o --out" "--format" "--hash-algo --hash-key --salt-separator --rounds --mem-cost --parallelization --block-size --dk-len --hash-input-order" "--shell" "--resource-file" "--app --resource-file" "--app --generator --dry-run" "-o --output --pretty --shallow --export --order-by --order-by-key --order-by-value --limit-to-first --limit-to-last --start-at --end-at --equal-to --instance" "-l --location" "" "-o --output -d --duration --raw --no-collapse -i --input --instance" "-d --data --instance --disable-triggers" "-f --force --instance --disable-triggers" "--instance" "--instance" "--instance" "--instance" "--instance" "-d --data -f --force --instance --disable-triggers" "--instance" "--instance" "-d --data -f --force --instance --disable-triggers" "-f --force -p --public -m --message --only --except" "--only --inspect-functions --import --export-on-exit --ui" "-f --force --only" "--only --inspect-functions --import --export-on-exit" "-p --port" "" "" "" "" "-f --force --local" "-m --message -f --force" "--inspect-functions --test-config --test-params --import --export-on-exit --ui" "--inspect-functions --test-config --test-params --import --export-on-exit" "" "" "" "-s --stage -f --force" "" "" "-f --force" "" "-f --force" "--markdown" "--local -f --force" "" "" "--local -f --force" "--local -f --force" "" "-r --recursive --shallow --all-collections -f --force" "--pretty" "--from --only --except" "" "" "" "" "--region -f --force" "--regions" "" "--only -n --lines --open" "" "-f --force" "" "-f --force" "-f --force --data-file" "-p --port --inspect-functions" "" "-e --expires --site" "-f --force --site" "-e --expires --only --open --no-authorized-domains" "--site" "--site" "" "-f --force -s --site" "--app" "-f --force" "" "" "" "" "--no-localhost" "--no-localhost" "" "" "--no-localhost --reauth" "" "" "" "-n --display-name -o --organization -f --folder" "" "-v --version-number -o --output" "-v --version-number -f --force" "--limit" "-p --port -o --host --only --except" "" "" "" "" "" "" "" "" "" "--add --alias --unalias --clear"

# List of all the options of all commands as "<COMMAND>:<OPTION>" to be used as the index of following variables
set OPTIONS_INDEX appdistribution:distribute:--app appdistribution:distribute:--release-notes appdistribution:distribute:--release-notes-file appdistribution:distribute:--testers appdistribution:distribute:--testers-file appdistribution:distribute:--groups appdistribution:distribute:--groups-file appdistribution:testers:add:--file appdistribution:testers:remove:--file    apps:create:-a apps:create:--package-name apps:create:-b apps:create:--bundle-id apps:create:-s apps:create:--app-store-id  apps:sdkconfig:-o apps:sdkconfig:--out auth:export:--format auth:import:--hash-algo auth:import:--hash-key auth:import:--salt-separator auth:import:--rounds auth:import:--mem-cost auth:import:--parallelization auth:import:--block-size auth:import:--dk-len auth:import:--hash-input-order completion:--shell crashlytics:mappingfile:generateid:--resource-file crashlytics:mappingfile:upload:--app crashlytics:mappingfile:upload:--resource-file crashlytics:symbols:upload:--app crashlytics:symbols:upload:--generator crashlytics:symbols:upload:--dry-run database:get:-o database:get:--output database:get:--pretty database:get:--shallow database:get:--export database:get:--order-by database:get:--order-by-key database:get:--order-by-value database:get:--limit-to-first database:get:--limit-to-last database:get:--start-at database:get:--end-at database:get:--equal-to database:get:--instance database:instances:create:-l database:instances:create:--location  database:profile:-o database:profile:--output database:profile:-d database:profile:--duration database:profile:--raw database:profile:--no-collapse database:profile:-i database:profile:--input database:profile:--instance database:push:-d database:push:--data database:push:--instance database:push:--disable-triggers database:remove:-f database:remove:--force database:remove:--instance database:remove:--disable-triggers database:rules:canary:--instance database:rules:get:--instance database:rules:list:--instance database:rules:release:--instance database:rules:stage:--instance database:set:-d database:set:--data database:set:-f database:set:--force database:set:--instance database:set:--disable-triggers database:settings:get:--instance database:settings:set:--instance database:update:-d database:update:--data database:update:-f database:update:--force database:update:--instance database:update:--disable-triggers deploy:-f deploy:--force deploy:-p deploy:--public deploy:-m deploy:--message deploy:--only deploy:--except emulators:exec:--only emulators:exec:--inspect-functions emulators:exec:--import emulators:exec:--export-on-exit emulators:exec:--ui emulators:export:-f emulators:export:--force emulators:export:--only emulators:start:--only emulators:start:--inspect-functions emulators:start:--import emulators:start:--export-on-exit experimental:functions:shell:-p experimental:functions:shell:--port     ext:configure:-f ext:configure:--force ext:configure:--local ext:dev:deprecate:-m ext:dev:deprecate:--message ext:dev:deprecate:-f ext:dev:deprecate:--force ext:dev:emulators:exec:--inspect-functions ext:dev:emulators:exec:--test-config ext:dev:emulators:exec:--test-params ext:dev:emulators:exec:--import ext:dev:emulators:exec:--export-on-exit ext:dev:emulators:exec:--ui ext:dev:emulators:start:--inspect-functions ext:dev:emulators:start:--test-config ext:dev:emulators:start:--test-params ext:dev:emulators:start:--import ext:dev:emulators:start:--export-on-exit    ext:dev:publish:-s ext:dev:publish:--stage ext:dev:publish:-f ext:dev:publish:--force   ext:dev:unpublish:-f ext:dev:unpublish:--force  ext:export:-f ext:export:--force ext:info:--markdown ext:install:--local ext:install:-f ext:install:--force   ext:uninstall:--local ext:uninstall:-f ext:uninstall:--force ext:update:--local ext:update:-f ext:update:--force  firestore:delete:-r firestore:delete:--recursive firestore:delete:--shallow firestore:delete:--all-collections firestore:delete:-f firestore:delete:--force firestore:indexes:--pretty functions:config:clone:--from functions:config:clone:--only functions:config:clone:--except     functions:delete:--region functions:delete:-f functions:delete:--force functions:deletegcfartifacts:--regions  functions:log:--only functions:log:-n functions:log:--lines functions:log:--open  functions:secrets:destroy:-f functions:secrets:destroy:--force  functions:secrets:prune:-f functions:secrets:prune:--force functions:secrets:set:-f functions:secrets:set:--force functions:secrets:set:--data-file functions:shell:-p functions:shell:--port functions:shell:--inspect-functions  hosting:channel:create:-e hosting:channel:create:--expires hosting:channel:create:--site hosting:channel:delete:-f hosting:channel:delete:--force hosting:channel:delete:--site hosting:channel:deploy:-e hosting:channel:deploy:--expires hosting:channel:deploy:--only hosting:channel:deploy:--open hosting:channel:deploy:--no-authorized-domains hosting:channel:list:--site hosting:channel:open:--site  hosting:disable:-f hosting:disable:--force hosting:disable:-s hosting:disable:--site hosting:sites:create:--app hosting:sites:delete:-f hosting:sites:delete:--force     login:add:--no-localhost login:ci:--no-localhost   login:--no-localhost login:--reauth    projects:create:-n projects:create:--display-name projects:create:-o projects:create:--organization projects:create:-f projects:create:--folder  remoteconfig:get:-v remoteconfig:get:--version-number remoteconfig:get:-o remoteconfig:get:--output remoteconfig:rollback:-v remoteconfig:rollback:--version-number remoteconfig:rollback:-f remoteconfig:rollback:--force remoteconfig:versions:list:--limit serve:-p serve:--port serve:-o serve:--host serve:--only serve:--except          use:--add use:--alias use:--unalias use:--clear

# List of descriptions for associated options (indices match with items in OPTIONS_INDEX)
set OPTION_DESCRIPTIONS "the app id of your Firebase app" "release notes to include" "path to file with release notes" "a comma separated list of tester emails to distribute to" "path to file with a comma separated list of tester emails to distribute to" "a comma separated list of group aliases to distribute to" "path to file with a comma separated list of group aliases to distribute to" "a path to a file containing a list of tester emails to be added" "a path to a file containing a list of tester emails to be removed"    "required package name for the Android app" "required package name for the Android app" "required bundle id for the iOS app" "required bundle id for the iOS app" "(optional) app store id for the iOS app" "(optional) app store id for the iOS app"  "(optional) write config output to a file" "(optional) write config output to a file" "Format of exported data (csv, json). Ignored if <dataFile> has format extension." "specify the hash algorithm used in password for these accounts" "specify the key used in hash algorithm" "specify the salt separator which will be appended to salt when verifying password. only used by SCRYPT now." "specify how many rounds for hash calculation." "specify the memory cost for firebase scrypt, or cpu/memory cost for standard scrypt" "specify the parallelization for standard scrypt." "specify the block size (normally is 8) for standard scrypt." "specify derived key length for standard scrypt." "specify the order of password and salt. Possible values are SALT_FIRST and PASSWORD_FIRST. MD5, SHA1, SHA256, SHA512, HMAC_MD5, HMAC_SHA1, HMAC_SHA256, HMAC_SHA512 support this flag." "Specify shell for which the completion code should be generated. currently \"bash\" and \"fish\" are supported." "path to the Android resource XML file that will be created or updated." "the app id of your Firebase app" "path to the Android resource XML file that includes the mapping file id" "the app id of your Firebase app" "the symbol generator being used, default is breakpad" "generate symbols without uploading them" "save output to the specified file" "save output to the specified file" "pretty print response" "return shallow response" "include priorities in the output response" "select a child key by which to order results" "order by key name" "order by primitive value" "limit to the first <num> results" "limit to the last <num> results" "start results at <val> (based on specified ordering)" "end results at <val> (based on specified ordering)" "restrict results to <val> (based on specified ordering)" "use the database <instance>.firebaseio.com (if omitted, use default database instance)" "(optional) location for the database instance, defaults to us-central1" "(optional) location for the database instance, defaults to us-central1"  "save the output to the specified file" "save the output to the specified file" "collect database usage information for the specified number of seconds" "collect database usage information for the specified number of seconds" "output the raw stats collected as newline delimited json" "prevent collapsing similar paths into $wildcard locations" "generate the report based on the specified file instead of streaming logs from the database" "generate the report based on the specified file instead of streaming logs from the database" "use the database <instance>.firebaseio.com (if omitted, use default database instance)" "specify escaped JSON directly" "specify escaped JSON directly" "use the database <instance>.firebaseio.com (if omitted, use default database instance)" "suppress any Cloud functions triggered by this operation" "pass this option to bypass confirmation prompt" "pass this option to bypass confirmation prompt" "use the database <instance>.firebaseio.com (if omitted, use default database instance)" "suppress any Cloud functions triggered by this operation" "use the database <instance>.firebaseio.com (if omitted, uses default database instance)" "use the database <instance>.firebaseio.com (if omitted, uses default database instance)" "use the database <instance>.firebaseio.com (if omitted, uses default database instance)" "use the database <instance>.firebaseio.com (if omitted, uses default database instance)" "use the database <instance>.firebaseio.com (if omitted, uses default database instance)" "specify escaped JSON directly" "specify escaped JSON directly" "pass this option to bypass confirmation prompt" "pass this option to bypass confirmation prompt" "use the database <instance>.firebaseio.com (if omitted, use default database instance)" "suppress any Cloud functions triggered by this operation" "use the database <instance>.firebaseio.com (if omitted, uses default database instance)" "use the database <instance>.firebaseio.com (if omitted, use default database instance)" "specify escaped JSON directly" "specify escaped JSON directly" "pass this option to bypass confirmation prompt" "pass this option to bypass confirmation prompt" "use the database <instance>.firebaseio.com (if omitted, use default database instance)" "suppress any Cloud functions triggered by this operation" "delete Cloud Functions missing from the current working directory without confirmation" "delete Cloud Functions missing from the current working directory without confirmation" "override the Hosting public directory specified in firebase.json" "override the Hosting public directory specified in firebase.json" "an optional message describing this deploy" "an optional message describing this deploy" "only deploy to specified, comma-separated targets (e.g. \"hosting,storage\"). For functions, can specify filters with colons to scope function deploys to only those functions (e.g. \"--only functions:func1,functions:func2\"). When filtering based on export groups (the exported module object keys), use dots to specify group names (e.g. \"--only functions:group1.subgroup1,functions:group2)\"" "deploy to all targets except specified (e.g. \"database\")" "only specific emulators. This is a comma separated list of emulator names. Valid options are: [\"auth\",\"functions\",\"firestore\",\"database\",\"hosting\",\"pubsub\",\"storage\",\"eventarc\"]" "emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)" "import emulator data from a previous export (see emulators:export)" "automatically export emulator data (emulators:export) when the emulators make a clean exit (SIGINT), when no dir is provided the location of --import [dir] is used" "run the Emulator UI" "overwrite any export data in the target directory" "overwrite any export data in the target directory" "only specific emulators. This is a comma separated list of emulator names. Valid options are: [\"auth\",\"functions\",\"firestore\",\"database\",\"hosting\",\"pubsub\",\"storage\",\"eventarc\"]" "only specific emulators. This is a comma separated list of emulator names. Valid options are: [\"auth\",\"functions\",\"firestore\",\"database\",\"hosting\",\"pubsub\",\"storage\",\"eventarc\"]" "emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)" "import emulator data from a previous export (see emulators:export)" "automatically export emulator data (emulators:export) when the emulators make a clean exit (SIGINT), when no dir is provided the location of --import [dir] is used" "the port on which to emulate functions (default: 5000)" "the port on which to emulate functions (default: 5000)"     "automatically accept all interactive prompts" "automatically accept all interactive prompts" "deprecated" "deprecation message" "deprecation message" "override deprecation message for existing deprecated extension versions that match" "override deprecation message for existing deprecated extension versions that match" "emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)" "A firebase.json style file. Used to configure the Firestore and Realtime Database emulators." "A .env file containing test param values for your emulated extension." "import emulator data from a previous export (see emulators:export)" "automatically export emulator data (emulators:export) when the emulators make a clean exit (SIGINT), when no dir is provided the location of --import [dir] is used" "run the Emulator UI" "emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)" "A firebase.json style file. Used to configure the Firestore and Realtime Database emulators." "A .env file containing test param values for your emulated extension." "import emulator data from a previous export (see emulators:export)" "automatically export emulator data (emulators:export) when the emulators make a clean exit (SIGINT), when no dir is provided the location of --import [dir] is used"    "release stage (supports \"rc\", \"alpha\", \"beta\", and \"stable\")" "release stage (supports \"rc\", \"alpha\", \"beta\", and \"stable\")" "automatically accept all interactive prompts" "automatically accept all interactive prompts"   "automatically accept all interactive prompts" "automatically accept all interactive prompts"  "automatically accept all interactive prompts" "automatically accept all interactive prompts" "output info in Markdown suitable for constructing a README file" "deprecated" "automatically accept all interactive prompts" "automatically accept all interactive prompts"   "deprecated" "automatically accept all interactive prompts" "automatically accept all interactive prompts" "deprecated" "automatically accept all interactive prompts" "automatically accept all interactive prompts"  "Recursive. Delete all documents and subcollections at and under the specified level. May not be passed along with --shallow." "Recursive. Delete all documents and subcollections at and under the specified level. May not be passed along with --shallow." "Shallow. Delete only documents at the specified level and ignore documents in subcollections. This action can potentially orphan documents nested in subcollections. May not be passed along with -r." "Delete all. Deletes the entire Firestore database, including all collections and documents. Any other flags or arguments will be ignored." "No confirmation. Otherwise, a confirmation prompt will appear." "No confirmation. Otherwise, a confirmation prompt will appear." "Pretty print. When not specified the indexes are printed in the JSON specification format." "the project from which to clone configuration" "a comma-separated list of keys to clone" "a comma-separated list of keys to not clone"     "Specify region of the function to be deleted. If omitted, functions from all regions whose names match the filters will be deleted. " "automatically accept all interactive prompts" "automatically accept all interactive prompts" "Specify regions of artifacts to be deleted. If omitted, artifacts from all regions will be deleted. <regions> is a Google defined region list, e.g. us-central1,us-east1,europe-west2."  "only show logs of specified, comma-seperated functions (e.g. \"funcA,funcB\")" "specify number of log lines to fetch" "specify number of log lines to fetch" "open logs page in web browser"  "Destroys a secret without confirmation." "Destroys a secret without confirmation."  "Destroys unused secrets without prompt" "Destroys unused secrets without prompt" "Automatically updates functions to use the new secret." "Automatically updates functions to use the new secret." "File path from which to read secret data. Set to \"-\" to read the secret data from stdin." "the port on which to emulate functions" "the port on which to emulate functions" "emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)"  "duration string (e.g. 12h or 30d) for channel expiration, max 30d" "duration string (e.g. 12h or 30d) for channel expiration, max 30d" "site for which to create the channel" "automatically accept all interactive prompts" "automatically accept all interactive prompts" "site in which the channel exists" "duration string (e.g. 12h, 30d) for channel expiration, max 30d; defaults to 7d" "duration string (e.g. 12h, 30d) for channel expiration, max 30d; defaults to 7d" "only create previews for specified targets" "open a browser to the channel after deploying" "do not sync channel domains with Firebase Auth" "list channels for the specified site" "the site to which the channel belongs"  "skip confirmation" "skip confirmation" "the site to disable" "the site to disable" "specify an existing Firebase Web App ID" "automatically accept all interactive prompts" "automatically accept all interactive prompts"     "copy and paste a code instead of starting a local server for authentication" "copy and paste a code instead of starting a local server for authentication"   "login from a device without an accessible localhost" "force reauthentication even if already logged in"    "(optional) display name for the project" "(optional) display name for the project" "(optional) ID of the parent Google Cloud Platform organization under which to create this project" "(optional) ID of the parent Google Cloud Platform organization under which to create this project" "(optional) ID of the parent Google Cloud Platform folder in which to create this project" "(optional) ID of the parent Google Cloud Platform folder in which to create this project"  "grabs the specified version of the template" "grabs the specified version of the template" "write config output to a filename (if omitted, will use the default file path)" "write config output to a filename (if omitted, will use the default file path)" "rollback to the specified version of the template" "rollback to the specified version of the template" "automatically accept all interactive prompts" "automatically accept all interactive prompts" "limit the number of versions being returned. Pass '0' to fetch all versions." "the port on which to listen (default: 5000)" "the port on which to listen (default: 5000)" "the host on which to listen (default: localhost)" "the host on which to listen (default: localhost)" "only serve specified targets (valid targets are: hosting, functions)" "serve all except specified targets (valid targets are: hosting, functions)"          "create a new project alias interactively" "create a new alias for the provided project id" "remove an already created project alias" "clear the active project selection"

# If an option accepts parameters, it will be listed in this array in its "<COMMAND>:<OPTION>" form
set OPTION_PARAMETERS appdistribution:distribute:--app appdistribution:distribute:--release-notes appdistribution:distribute:--release-notes-file appdistribution:distribute:--testers appdistribution:distribute:--testers-file appdistribution:distribute:--groups appdistribution:distribute:--groups-file appdistribution:testers:add:--file appdistribution:testers:remove:--file apps:create:-a apps:create:--package-name apps:create:-b apps:create:--bundle-id apps:create:-s apps:create:--app-store-id apps:sdkconfig:-o apps:sdkconfig:--out auth:export:--format auth:import:--hash-algo auth:import:--hash-key auth:import:--salt-separator auth:import:--rounds auth:import:--mem-cost auth:import:--parallelization auth:import:--block-size auth:import:--dk-len auth:import:--hash-input-order completion:--shell crashlytics:mappingfile:generateid:--resource-file crashlytics:mappingfile:upload:--app crashlytics:mappingfile:upload:--resource-file crashlytics:symbols:upload:--app crashlytics:symbols:upload:--generator database:get:-o database:get:--output database:get:--order-by database:get:--limit-to-first database:get:--limit-to-last database:get:--start-at database:get:--end-at database:get:--equal-to database:get:--instance database:instances:create:-l database:instances:create:--location database:profile:-o database:profile:--output database:profile:-d database:profile:--duration database:profile:-i database:profile:--input database:profile:--instance database:push:-d database:push:--data database:push:--instance database:remove:--instance database:rules:canary:--instance database:rules:get:--instance database:rules:list:--instance database:rules:release:--instance database:rules:stage:--instance database:set:-d database:set:--data database:set:--instance database:settings:get:--instance database:settings:set:--instance database:update:-d database:update:--data database:update:--instance deploy:-p deploy:--public deploy:-m deploy:--message deploy:--only deploy:--except emulators:exec:--only emulators:exec:--inspect-functions emulators:exec:--import emulators:exec:--export-on-exit emulators:export:--only emulators:start:--only emulators:start:--inspect-functions emulators:start:--import emulators:start:--export-on-exit experimental:functions:shell:-p experimental:functions:shell:--port ext:dev:deprecate:-m ext:dev:deprecate:--message ext:dev:emulators:exec:--inspect-functions ext:dev:emulators:exec:--test-config ext:dev:emulators:exec:--test-params ext:dev:emulators:exec:--import ext:dev:emulators:exec:--export-on-exit ext:dev:emulators:start:--inspect-functions ext:dev:emulators:start:--test-config ext:dev:emulators:start:--test-params ext:dev:emulators:start:--import ext:dev:emulators:start:--export-on-exit ext:dev:publish:-s ext:dev:publish:--stage functions:config:clone:--from functions:config:clone:--only functions:config:clone:--except functions:delete:--region functions:deletegcfartifacts:--regions functions:log:--only functions:log:-n functions:log:--lines functions:secrets:set:--data-file functions:shell:-p functions:shell:--port functions:shell:--inspect-functions hosting:channel:create:-e hosting:channel:create:--expires hosting:channel:create:--site hosting:channel:delete:--site hosting:channel:deploy:-e hosting:channel:deploy:--expires hosting:channel:deploy:--only hosting:channel:list:--site hosting:channel:open:--site hosting:disable:-s hosting:disable:--site hosting:sites:create:--app projects:create:-n projects:create:--display-name projects:create:-o projects:create:--organization projects:create:-f projects:create:--folder remoteconfig:get:-v remoteconfig:get:--version-number remoteconfig:get:-o remoteconfig:get:--output remoteconfig:rollback:-v remoteconfig:rollback:--version-number remoteconfig:versions:list:--limit serve:-p serve:--port serve:-o serve:--host serve:--only serve:--except use:--alias use:--unalias

# If an option accepts files as its parameter, it will be listed in this array in its "<COMMAND>:<OPTION>" form
set ACCEPTS_FILE appdistribution:distribute:--release-notes-file appdistribution:distribute:--testers-file appdistribution:distribute:--groups-file appdistribution:testers:add:--file appdistribution:testers:remove:--file apps:sdkconfig:-o apps:sdkconfig:--out database:get:-o database:get:--output database:profile:-o database:profile:--output database:profile:-i database:profile:--input ext:dev:emulators:exec:--test-config ext:dev:emulators:exec:--test-params ext:dev:emulators:start:--test-config ext:dev:emulators:start:--test-params remoteconfig:get:-o remoteconfig:get:--output

function firebase_tools_completion
  set -l cur (commandline -pco)[-1]
  set -l prev (commandline -pco)[-2]
  set -l command (commandline -pco)[2]

  # No command has been entered yet
  if [ -z "$command" ]
      for i in (seq (count $COMMANDS_INDEX))
          echo $COMMANDS_INDEX[$i]\t$COMMAND_DESCRIPTIONS[$i]
      end

  # A command has been entered, user is entering options but it is not entering a parameter of an option
  else if string match -qv -- "-*" "$cur"; or not contains -- "$command:$cur" $OPTION_PARAMETERS
      for option in (string split ' ' -- $OPTIONS[(contains -i -- "$command" $COMMANDS_INDEX)])
          echo $option\t$OPTION_DESCRIPTIONS[(contains -i -- "$command:$option" $OPTIONS_INDEX)]
      end

  # An option is pending a file parameter
  else if string match -q -- "-*" "$cur"; and contains -- "$command:$cur" $ACCEPTS_FILE ]
      for file in (ls -A)
          echo $file
      end

  # We can't provide any options to the user
  else
      return 1
  end
end

complete -c firebase -a '(firebase_tools_completion)' -f
###-end-firebase-completion-###
