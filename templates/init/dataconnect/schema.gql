# # Example schema for simple movie

# # Users
# # Suppose a user can leave reviews for movies
# # user-reviews is a one to many relationship, movie-reviews is a one to many relationship, movie:user is a many to many relationship
# type User
#   @table {
#   id: String! @col(name: "user_auth")
#   username: String! @col(name: "username", dataType: "varchar(50)")
#   # The following are generated from the @ref in the Review table
#   # reviews_on_user 
#   # movies_via_Review
# }

# # Movies
# type Movie
#   # The below parameter values are generated by default with @table, and can be edited manually.
#   @table {
#   # implicitly calls @col to generates a column name. ex: @col(name: "movie_id")
#   # for UUID fields, @default(expr: "uuidV4()") is also implicitly called
#   id: UUID!
#   title: String!
#   imageUrl: String!
#   genre: String
# }

# # Movie Metadata
# # Movie - MovieMetadata is a one-to-one relationship
# type MovieMetadata
#   @table {
#   # @unique indicates a 1-1 relationship
#   movie: Movie! @unique 
#   # movieId: UUID <- this is created by the above reference
#   rating: Float
#   releaseYear: Int
#   description: String
# }

# # Reviews
# type Review @table(name: "Reviews", key: ["movie", "user"]) {
#   id: UUID! @default(expr: "uuidV4()")
#   user: User!
#   movie: Movie!
#   rating: Int
#   reviewText: String
#   reviewDate: Date! @default(expr: "request.time")
# }
