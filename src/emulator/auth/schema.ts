/* DO NOT EDIT! This file is automatically generated by scripts/gen-auth-api-spec.ts. */
/* See README.md (Section: Autogenerated files) for how to read / review this file. */
/* eslint-disable */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/accounts:createAuthUri": {
    /** If an email identifier is specified, checks and returns if any user account is registered with the email. If there is a registered account, fetches all providers associated with the account's email. If the provider ID of an Identity Provider (IdP) is specified, creates an authorization URI for the IdP. The user can be directed to this URI to sign in with the IdP. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.createAuthUri"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:delete": {
    /** Deletes a user's account. */
    post: operations["identitytoolkit.accounts.delete"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:issueSamlResponse": {
    /** Experimental */
    post: operations["identitytoolkit.accounts.issueSamlResponse"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:lookup": {
    /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
    post: operations["identitytoolkit.accounts.lookup"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:resetPassword": {
    /** Resets the password of an account either using an out-of-band code generated by sendOobCode or by specifying the email and password of the account to be modified. Can also check the purpose of an out-of-band code without consuming it. */
    post: operations["identitytoolkit.accounts.resetPassword"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:sendOobCode": {
    /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
    post: operations["identitytoolkit.accounts.sendOobCode"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:sendVerificationCode": {
    /** Sends a SMS verification code for phone number sign-in. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.sendVerificationCode"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:signInWithCustomToken": {
    /** Signs in or signs up a user by exchanging a custom Auth token. Upon a successful sign-in or sign-up, a new Identity Platform ID token and refresh token are issued for the user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.signInWithCustomToken"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:signInWithEmailLink": {
    /** Signs in or signs up a user with a out-of-band code from an email link. If a user does not exist with the given email address, a user record will be created. If the sign-in succeeds, an Identity Platform ID and refresh token are issued for the authenticated user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.signInWithEmailLink"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:signInWithGameCenter": {
    /** Signs in or signs up a user with iOS Game Center credentials. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. The bundle ID is required in the request header as `x-ios-bundle-identifier`. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.signInWithGameCenter"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:signInWithIdp": {
    /** Signs in or signs up a user using credentials from an Identity Provider (IdP). This is done by manually providing an IdP credential, or by providing the authorization response obtained via the authorization request from CreateAuthUri. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. A new Identity Platform user account will be created if the user has not previously signed in to the IdP with the same account. In addition, when the "One account per email address" setting is enabled, there should not be an existing Identity Platform user account with the same email address for a new user account to be created. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.signInWithIdp"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:signInWithPassword": {
    /** Signs in a user with email and password. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.signInWithPassword"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:signInWithPhoneNumber": {
    /** Completes a phone number authentication attempt. If a user already exists with the given phone number, an ID token is minted for that user. Otherwise, a new user is created and associated with the phone number. This method may also be used to link a phone number to an existing user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.signInWithPhoneNumber"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:signUp": {
    /** Signs up a new email and password user or anonymous user, or upgrades an anonymous user to email and password. For an admin request with a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control), creates a new anonymous, email and password, or phone number user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.signUp"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:update": {
    /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
    post: operations["identitytoolkit.accounts.update"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/accounts:verifyIosClient": {
    /** Verifies an iOS client is a real iOS device. If the request is valid, a receipt will be sent in the response and a secret will be sent via Apple Push Notification Service. The client should send both of them back to certain Identity Platform APIs in a later call (for example, /accounts:sendVerificationCode), in order to verify the client. The bundle ID is required in the request header as `x-ios-bundle-identifier`. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.accounts.verifyIosClient"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts": {
    /** Signs up a new email and password user or anonymous user, or upgrades an anonymous user to email and password. For an admin request with a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control), creates a new anonymous, email and password, or phone number user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.projects.accounts"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}:createSessionCookie": {
    /** Creates a session cookie for the given Identity Platform ID token. The session cookie is used by the client to preserve the user's login state. */
    post: operations["identitytoolkit.projects.createSessionCookie"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}:queryAccounts": {
    /** Looks up user accounts within a project or a tenant based on conditions in the request. */
    post: operations["identitytoolkit.projects.queryAccounts"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:batchCreate": {
    /** Uploads multiple accounts into the Google Cloud project. If there is a problem uploading one or more of the accounts, the rest will be uploaded, and a list of the errors will be returned. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
    post: operations["identitytoolkit.projects.accounts.batchCreate"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:batchDelete": {
    /** Batch deletes multiple accounts. For accounts that fail to be deleted, error info is contained in the response. The method ignores accounts that do not exist or are duplicated in the request. This method requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
    post: operations["identitytoolkit.projects.accounts.batchDelete"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:batchGet": {
    /** Download account information for all accounts on the project in a paginated manner. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control).. Furthermore, additional permissions are needed to get password hash, password salt, and password version from accounts; otherwise these fields are redacted. */
    get: operations["identitytoolkit.projects.accounts.batchGet"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:delete": {
    /** Deletes a user's account. */
    post: operations["identitytoolkit.projects.accounts.delete"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:lookup": {
    /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
    post: operations["identitytoolkit.projects.accounts.lookup"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:query": {
    /** Looks up user accounts within a project or a tenant based on conditions in the request. */
    post: operations["identitytoolkit.projects.accounts.query"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:sendOobCode": {
    /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
    post: operations["identitytoolkit.projects.accounts.sendOobCode"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/accounts:update": {
    /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
    post: operations["identitytoolkit.projects.accounts.update"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts": {
    /** Signs up a new email and password user or anonymous user, or upgrades an anonymous user to email and password. For an admin request with a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control), creates a new anonymous, email and password, or phone number user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
    post: operations["identitytoolkit.projects.tenants.accounts"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}:createSessionCookie": {
    /** Creates a session cookie for the given Identity Platform ID token. The session cookie is used by the client to preserve the user's login state. */
    post: operations["identitytoolkit.projects.tenants.createSessionCookie"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:batchCreate": {
    /** Uploads multiple accounts into the Google Cloud project. If there is a problem uploading one or more of the accounts, the rest will be uploaded, and a list of the errors will be returned. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
    post: operations["identitytoolkit.projects.tenants.accounts.batchCreate"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:batchDelete": {
    /** Batch deletes multiple accounts. For accounts that fail to be deleted, error info is contained in the response. The method ignores accounts that do not exist or are duplicated in the request. This method requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
    post: operations["identitytoolkit.projects.tenants.accounts.batchDelete"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:batchGet": {
    /** Download account information for all accounts on the project in a paginated manner. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control).. Furthermore, additional permissions are needed to get password hash, password salt, and password version from accounts; otherwise these fields are redacted. */
    get: operations["identitytoolkit.projects.tenants.accounts.batchGet"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:delete": {
    /** Deletes a user's account. */
    post: operations["identitytoolkit.projects.tenants.accounts.delete"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:lookup": {
    /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
    post: operations["identitytoolkit.projects.tenants.accounts.lookup"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:query": {
    /** Looks up user accounts within a project or a tenant based on conditions in the request. */
    post: operations["identitytoolkit.projects.tenants.accounts.query"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:sendOobCode": {
    /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
    post: operations["identitytoolkit.projects.tenants.accounts.sendOobCode"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts:update": {
    /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
    post: operations["identitytoolkit.projects.tenants.accounts.update"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/projects": {
    /** Gets a project's public Identity Toolkit configuration. (Legacy) This method also supports authenticated calls from a developer to retrieve non-public configuration. */
    get: operations["identitytoolkit.getProjects"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/recaptchaParams": {
    /** Gets parameters needed for generating a reCAPTCHA challenge. */
    get: operations["identitytoolkit.getRecaptchaParams"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/sessionCookiePublicKeys": {
    /** Retrieves the set of public keys of the session cookie JSON Web Token (JWT) signer that can be used to validate the session cookie created through createSessionCookie. */
    get: operations["identitytoolkit.getSessionCookiePublicKeys"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/accounts/mfaEnrollment:finalize": {
    /** Finishes enrolling a second factor for the user. */
    post: operations["identitytoolkit.accounts.mfaEnrollment.finalize"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/accounts/mfaEnrollment:start": {
    /** Step one of the MFA enrollment process. In SMS case, this sends an SMS verification code to the user. */
    post: operations["identitytoolkit.accounts.mfaEnrollment.start"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/accounts/mfaEnrollment:withdraw": {
    /** Revokes one second factor from the enrolled second factors for an account. */
    post: operations["identitytoolkit.accounts.mfaEnrollment.withdraw"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/accounts/mfaSignIn:finalize": {
    /** Verifies the MFA challenge and performs sign-in */
    post: operations["identitytoolkit.accounts.mfaSignIn.finalize"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/accounts/mfaSignIn:start": {
    /** Sends the MFA challenge */
    post: operations["identitytoolkit.accounts.mfaSignIn.start"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/defaultSupportedIdps": {
    /** List all default supported Idps. */
    get: operations["identitytoolkit.defaultSupportedIdps.list"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/config": {
    /** Retrieve an Identity Toolkit project configuration. */
    get: operations["identitytoolkit.projects.getConfig"];
    /** Update an Identity Toolkit project configuration. */
    patch: operations["identitytoolkit.projects.updateConfig"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/defaultSupportedIdpConfigs": {
    /** List all default supported Idp configurations for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.defaultSupportedIdpConfigs.list"];
    /** Create a default supported Idp configuration for an Identity Toolkit project. */
    post: operations["identitytoolkit.projects.defaultSupportedIdpConfigs.create"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/defaultSupportedIdpConfigs/{defaultSupportedIdpConfigsId}": {
    /** Retrieve a default supported Idp configuration for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.defaultSupportedIdpConfigs.get"];
    /** Delete a default supported Idp configuration for an Identity Toolkit project. */
    delete: operations["identitytoolkit.projects.defaultSupportedIdpConfigs.delete"];
    /** Update a default supported Idp configuration for an Identity Toolkit project. */
    patch: operations["identitytoolkit.projects.defaultSupportedIdpConfigs.patch"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/identityPlatform:initializeAuth": {
    /** Initialize Identity Platform for a Cloud project. Identity Platform is an end-to-end authentication system for third-party users to access your apps and services. These could include mobile/web apps, games, APIs and beyond. This is the publicly available variant of EnableIdentityPlatform that is only available to billing-enabled projects. */
    post: operations["identitytoolkit.projects.identityPlatform.initializeAuth"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/inboundSamlConfigs": {
    /** List all inbound SAML configurations for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.inboundSamlConfigs.list"];
    /** Create an inbound SAML configuration for an Identity Toolkit project. */
    post: operations["identitytoolkit.projects.inboundSamlConfigs.create"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/inboundSamlConfigs/{inboundSamlConfigsId}": {
    /** Retrieve an inbound SAML configuration for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.inboundSamlConfigs.get"];
    /** Delete an inbound SAML configuration for an Identity Toolkit project. */
    delete: operations["identitytoolkit.projects.inboundSamlConfigs.delete"];
    /** Update an inbound SAML configuration for an Identity Toolkit project. */
    patch: operations["identitytoolkit.projects.inboundSamlConfigs.patch"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/oauthIdpConfigs": {
    /** List all Oidc Idp configurations for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.oauthIdpConfigs.list"];
    /** Create an Oidc Idp configuration for an Identity Toolkit project. */
    post: operations["identitytoolkit.projects.oauthIdpConfigs.create"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/oauthIdpConfigs/{oauthIdpConfigsId}": {
    /** Retrieve an Oidc Idp configuration for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.oauthIdpConfigs.get"];
    /** Delete an Oidc Idp configuration for an Identity Toolkit project. */
    delete: operations["identitytoolkit.projects.oauthIdpConfigs.delete"];
    /** Update an Oidc Idp configuration for an Identity Toolkit project. */
    patch: operations["identitytoolkit.projects.oauthIdpConfigs.patch"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants": {
    /** List tenants under the given agent project. Requires read permission on the Agent project. */
    get: operations["identitytoolkit.projects.tenants.list"];
    /** Create a tenant. Requires write permission on the Agent project. */
    post: operations["identitytoolkit.projects.tenants.create"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}": {
    /** Get a tenant. Requires read permission on the Tenant resource. */
    get: operations["identitytoolkit.projects.tenants.get"];
    /** Delete a tenant. Requires write permission on the Agent project. */
    delete: operations["identitytoolkit.projects.tenants.delete"];
    /** Update a tenant. Requires write permission on the Tenant resource. */
    patch: operations["identitytoolkit.projects.tenants.patch"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}:getIamPolicy": {
    /** Gets the access control policy for a resource. An error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Caller must have the right Google IAM permission on the resource. */
    post: operations["identitytoolkit.projects.tenants.getIamPolicy"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}:setIamPolicy": {
    /** Sets the access control policy for a resource. If the policy exists, it is replaced. Caller must have the right Google IAM permission on the resource. */
    post: operations["identitytoolkit.projects.tenants.setIamPolicy"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}:testIamPermissions": {
    /** Returns the caller's permissions on a resource. An error is returned if the resource does not exist. A caller is not required to have Google IAM permission to make this request. */
    post: operations["identitytoolkit.projects.tenants.testIamPermissions"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}/defaultSupportedIdpConfigs": {
    /** List all default supported Idp configurations for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.list"];
    /** Create a default supported Idp configuration for an Identity Toolkit project. */
    post: operations["identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.create"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}/defaultSupportedIdpConfigs/{defaultSupportedIdpConfigsId}": {
    /** Retrieve a default supported Idp configuration for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.get"];
    /** Delete a default supported Idp configuration for an Identity Toolkit project. */
    delete: operations["identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.delete"];
    /** Update a default supported Idp configuration for an Identity Toolkit project. */
    patch: operations["identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.patch"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}/inboundSamlConfigs": {
    /** List all inbound SAML configurations for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.tenants.inboundSamlConfigs.list"];
    /** Create an inbound SAML configuration for an Identity Toolkit project. */
    post: operations["identitytoolkit.projects.tenants.inboundSamlConfigs.create"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}/inboundSamlConfigs/{inboundSamlConfigsId}": {
    /** Retrieve an inbound SAML configuration for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.tenants.inboundSamlConfigs.get"];
    /** Delete an inbound SAML configuration for an Identity Toolkit project. */
    delete: operations["identitytoolkit.projects.tenants.inboundSamlConfigs.delete"];
    /** Update an inbound SAML configuration for an Identity Toolkit project. */
    patch: operations["identitytoolkit.projects.tenants.inboundSamlConfigs.patch"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}/oauthIdpConfigs": {
    /** List all Oidc Idp configurations for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.tenants.oauthIdpConfigs.list"];
    /** Create an Oidc Idp configuration for an Identity Toolkit project. */
    post: operations["identitytoolkit.projects.tenants.oauthIdpConfigs.create"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v2/projects/{targetProjectId}/tenants/{tenantId}/oauthIdpConfigs/{oauthIdpConfigsId}": {
    /** Retrieve an Oidc Idp configuration for an Identity Toolkit project. */
    get: operations["identitytoolkit.projects.tenants.oauthIdpConfigs.get"];
    /** Delete an Oidc Idp configuration for an Identity Toolkit project. */
    delete: operations["identitytoolkit.projects.tenants.oauthIdpConfigs.delete"];
    /** Update an Oidc Idp configuration for an Identity Toolkit project. */
    patch: operations["identitytoolkit.projects.tenants.oauthIdpConfigs.patch"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/v1/token": {
    /** The Token Service API lets you exchange either an ID token or a refresh token for an access token and a new refresh token. You can use the access token to securely call APIs that require user authorization. */
    post: operations["securetoken.token"];
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
  };
  "/emulator/v1/projects/{targetProjectId}/accounts": {
    /** Remove all accounts in the project, regardless of state. */
    delete: operations["emulator.projects.accounts.delete"];
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the accounts belong to. */
        targetProjectId: string;
      };
    };
  };
  "/emulator/v1/projects/{targetProjectId}/tenants/{tenantId}/accounts": {
    /** Remove all accounts in the project, regardless of state. */
    delete: operations["emulator.projects.accounts.delete"];
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the accounts belong to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId: string;
      };
    };
  };
  "/emulator/v1/projects/{targetProjectId}/config": {
    /** Get emulator-specific configuration for the project. */
    get: operations["emulator.projects.config.get"];
    /** Update emulator-specific configuration for the project. */
    patch: operations["emulator.projects.config.update"];
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the config belongs to. */
        targetProjectId: string;
      };
    };
  };
  "/emulator/v1/projects/{targetProjectId}/oobCodes": {
    /** List all pending confirmation codes for the project. */
    get: operations["emulator.projects.oobCodes.list"];
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the confirmation codes belongs to. */
        targetProjectId: string;
      };
    };
  };
  "/emulator/v1/projects/{targetProjectId}/tenants/{tenantId}/oobCodes": {
    /** List all pending confirmation codes for the project. */
    get: operations["emulator.projects.oobCodes.list"];
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the confirmation codes belongs to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId: string;
      };
    };
  };
  "/emulator/v1/projects/{targetProjectId}/verificationCodes": {
    /** List all pending phone verification codes for the project. */
    get: operations["emulator.projects.verificationCodes.list"];
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the verification codes belongs to. */
        targetProjectId: string;
      };
    };
  };
  "/emulator/v1/projects/{targetProjectId}/tenants/{tenantId}/verificationCodes": {
    /** List all pending phone verification codes for the project. */
    get: operations["emulator.projects.verificationCodes.list"];
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the verification codes belongs to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId: string;
      };
    };
  };
}

export interface components {
  schemas: {
    /** @description The parameters for Argon2 hashing algorithm. */
    GoogleCloudIdentitytoolkitV1Argon2Parameters: {
      /**
       * Format: byte
       * @description The additional associated data, if provided, is appended to the hash value to provide an additional layer of security. A base64-encoded string if specified via JSON.
       */
      associatedData?: string;
      /**
       * Format: int32
       * @description Required. The desired hash length in bytes. Minimum is 4 and maximum is 1024.
       */
      hashLengthBytes?: number;
      /** @description Required. Must not be HASH_TYPE_UNSPECIFIED. */
      hashType?: "HASH_TYPE_UNSPECIFIED" | "ARGON2_D" | "ARGON2_ID" | "ARGON2_I";
      /**
       * Format: int32
       * @description Required. The number of iterations to perform. Minimum is 1, maximum is 16.
       */
      iterations?: number;
      /**
       * Format: int32
       * @description Required. The memory cost in kibibytes. Maximum is 32768.
       */
      memoryCostKib?: number;
      /**
       * Format: int32
       * @description Required. The degree of parallelism, also called threads or lanes. Minimum is 1, maximum is 16.
       */
      parallelism?: number;
      /** @description The version of the Argon2 algorithm. This defaults to VERSION_13 if not specified. */
      version?: "VERSION_UNSPECIFIED" | "VERSION_10" | "VERSION_13";
    };
    /** @description The information required to auto-retrieve an SMS. */
    GoogleCloudIdentitytoolkitV1AutoRetrievalInfo: {
      /** @description The Android app's signature hash for Google Play Service's SMS Retriever API. */
      appSignatureHash?: string;
    };
    /** @description Request message for BatchDeleteAccounts. */
    GoogleCloudIdentitytoolkitV1BatchDeleteAccountsRequest: {
      /** @description Whether to force deleting accounts that are not in disabled state. If false, only disabled accounts will be deleted, and accounts that are not disabled will be added to the `errors`. */
      force?: boolean;
      /** @description Required. List of user IDs to be deleted. */
      localIds?: string[];
      /** @description If the accounts belong to an Identity Platform tenant, the ID of the tenant. If the accounts belong to an default Identity Platform project, the field is not needed. */
      tenantId?: string;
    };
    /** @description Response message to BatchDeleteAccounts. */
    GoogleCloudIdentitytoolkitV1BatchDeleteAccountsResponse: {
      /** @description Detailed error info for accounts that cannot be deleted. */
      errors?: components["schemas"]["GoogleCloudIdentitytoolkitV1BatchDeleteErrorInfo"][];
    };
    /** @description Error info for account failed to be deleted. */
    GoogleCloudIdentitytoolkitV1BatchDeleteErrorInfo: {
      /**
       * Format: int32
       * @description The index of the errored item in the original local_ids field.
       */
      index?: number;
      /** @description The corresponding user ID. */
      localId?: string;
      /** @description Detailed error message. */
      message?: string;
    };
    /** @description Request message for CreateAuthUri. */
    GoogleCloudIdentitytoolkitV1CreateAuthUriRequest: {
      appId?: string;
      /** @description Used for the Google provider. The type of the authentication flow to be used. If present, this should be `CODE_FLOW` to specify the authorization code flow. Otherwise, the default ID Token flow will be used. */
      authFlowType?: string;
      /** @description An opaque string used to maintain contextual information between the authentication request and the callback from the IdP. */
      context?: string;
      /** @description A valid URL for the IdP to redirect the user back to. The URL cannot contain fragments or the reserved `state` query parameter. */
      continueUri?: string;
      /** @description Additional customized query parameters to be added to the authorization URI. The following parameters are reserved and cannot be added: `client_id`, `response_type`, `scope`, `redirect_uri`, `state`. For the Microsoft provider, the Azure AD tenant to sign-in to can be specified in the `tenant` custom parameter. */
      customParameter?: { [key: string]: string };
      /** @description Used for the Google provider. The G Suite hosted domain of the user in order to restrict sign-in to users at that domain. */
      hostedDomain?: string;
      /** @description The email identifier of the user account to fetch associated providers for. At least one of the fields `identifier` and `provider_id` must be set. The length of the email address should be less than 256 characters and in the format of `name@domain.tld`. The email address should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec production. */
      identifier?: string;
      oauthConsumerKey?: string;
      /** @description Additional space-delimited OAuth 2.0 scopes specifying the scope of the authentication request with the IdP. Used for OAuth 2.0 IdPs. For the Google provider, the authorization code flow will be used if this field is set. */
      oauthScope?: string;
      openidRealm?: string;
      otaApp?: string;
      /** @description The provider ID of the IdP for the user to sign in with. This should be a provider ID enabled for sign-in, which is either from the list of [default supported IdPs](https://cloud.google.com/identity-platform/docs/reference/rest/v2/defaultSupportedIdps/list), or of the format `oidc.*` or `saml.*`. Some examples are `google.com`, `facebook.com`, `oidc.testapp`, and `saml.testapp`. At least one of the fields `identifier` and `provider_id` must be set. */
      providerId?: string;
      /** @description A session ID that can be verified against in SignInWithIdp to prevent session fixation attacks. If absent, a random string will be generated and returned as the session ID. */
      sessionId?: string;
      /** @description The ID of the Identity Platform tenant to create an authorization URI or lookup an email identifier for. If not set, the operation will be performed in the default Identity Platform instance in the project. */
      tenantId?: string;
    };
    /** @description Response message for CreateAuthUri. */
    GoogleCloudIdentitytoolkitV1CreateAuthUriResponse: {
      allProviders?: string[];
      /** @description The authorization URI for the requested provider. Present only when a provider ID is set in the request. */
      authUri?: string;
      /** @description Whether a CAPTCHA is needed because there have been too many failed login attempts by the user. Present only when a registered email identifier is set in the request. */
      captchaRequired?: boolean;
      /** @description Whether the user has previously signed in with the provider ID in the request. Present only when a registered email identifier is set in the request. */
      forExistingProvider?: boolean;
      kind?: string;
      /** @description The provider ID from the request, if provided. */
      providerId?: string;
      /** @description Whether the email identifier represents an existing account. Present only when an email identifier is set in the request. */
      registered?: boolean;
      /** @description The session ID from the request, or a random string generated by CreateAuthUri if absent. It is used to prevent session fixation attacks. */
      sessionId?: string;
      /** @description The list of sign-in methods that the user has previously used. Each element is one of `password`, `emailLink`, or the provider ID of an IdP. Present only when a registered email identifier is set in the request. */
      signinMethods?: string[];
    };
    /** @description Request message for CreateSessionCookie. */
    GoogleCloudIdentitytoolkitV1CreateSessionCookieRequest: {
      /** @description Required. A valid Identity Platform ID token. */
      idToken?: string;
      /** @description The tenant ID of the Identity Platform tenant the account belongs to. */
      tenantId?: string;
      /**
       * Format: int64
       * @description The number of seconds until the session cookie expires. Specify a duration in seconds, between five minutes and fourteen days, inclusively.
       */
      validDuration?: string;
    };
    /** @description Response message for CreateSessionCookie. */
    GoogleCloudIdentitytoolkitV1CreateSessionCookieResponse: {
      /** @description The session cookie that has been created from the Identity Platform ID token specified in the request. It is in the form of a JSON Web Token (JWT). Always present. */
      sessionCookie?: string;
    };
    /** @description Request message for DeleteAccount. */
    GoogleCloudIdentitytoolkitV1DeleteAccountRequest: {
      /** Format: int64 */
      delegatedProjectNumber?: string;
      /** @description The Identity Platform ID token of the account to delete. Require to be specified for requests from end users that lack Google OAuth 2.0 credential. Authenticated requests bearing a Google OAuth2 credential with proper permissions may pass local_id to specify the account to delete alternatively. */
      idToken?: string;
      /** @description The ID of user account to delete. Specifying this field requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). Requests from users lacking the credential should pass an ID token instead. */
      localId?: string;
      /** @description The ID of the project which the account belongs to. Should only be specified in authenticated requests that specify local_id of an account. */
      targetProjectId?: string;
      /** @description The ID of the tenant that the account belongs to, if applicable. Only require to be specified for authenticated requests bearing a Google OAuth 2.0 credential that specify local_id of an account that belongs to an Identity Platform tenant. */
      tenantId?: string;
    };
    /** @description Response message for DeleteAccount. */
    GoogleCloudIdentitytoolkitV1DeleteAccountResponse: {
      kind?: string;
    };
    /** @description Response message for DownloadAccount. */
    GoogleCloudIdentitytoolkitV1DownloadAccountResponse: {
      kind?: string;
      /** @description If there are more accounts to be downloaded, a token that can be passed back to DownloadAccount to get more accounts. Otherwise, this is blank. */
      nextPageToken?: string;
      /** @description All accounts belonging to the project/tenant limited by max_results in the request. */
      users?: components["schemas"]["GoogleCloudIdentitytoolkitV1UserInfo"][];
    };
    /** @description Email template */
    GoogleCloudIdentitytoolkitV1EmailTemplate: {
      /** @description Email body */
      body?: string;
      /** @description Whether the body or subject of the email is customized. */
      customized?: boolean;
      /** @description Whether the template is disabled. If true, a default template will be used. */
      disabled?: boolean;
      /** @description Email body format */
      format?: "EMAIL_BODY_FORMAT_UNSPECIFIED" | "PLAINTEXT" | "HTML";
      /** @description From address of the email */
      from?: string;
      /** @description From display name */
      fromDisplayName?: string;
      /** @description Local part of From address */
      fromLocalPart?: string;
      /** @description Value is in III language code format (e.g. "zh-CN", "es"). Both '-' and '_' separators are accepted. */
      locale?: string;
      /** @description Reply-to address */
      replyTo?: string;
      /** @description Subject of the email */
      subject?: string;
    };
    /** @description Error information explaining why an account cannot be uploaded. batch upload. */
    GoogleCloudIdentitytoolkitV1ErrorInfo: {
      /**
       * Format: int32
       * @description The index of the item, range is [0, request.size - 1]
       */
      index?: number;
      /** @description Detailed error message */
      message?: string;
    };
    /** @description Federated user identifier at an Identity Provider. */
    GoogleCloudIdentitytoolkitV1FederatedUserIdentifier: {
      /** @description The ID of supported identity providers. This should be a provider ID enabled for sign-in, which is either from the list of [default supported IdPs](https://cloud.google.com/identity-platform/docs/reference/rest/v2/defaultSupportedIdps/list), or of the format `oidc.*` or `saml.*`. Some examples are `google.com`, `facebook.com`, `oidc.testapp`, and `saml.testapp`. */
      providerId?: string;
      /** @description The user ID of the account at the third-party Identity Provider specified by `provider_id`. */
      rawId?: string;
    };
    /** @description Request message for GetAccountInfo. */
    GoogleCloudIdentitytoolkitV1GetAccountInfoRequest: {
      /** Format: int64 */
      delegatedProjectNumber?: string;
      /** @description The email address of one or more accounts to fetch. The length of email should be less than 256 characters and in the format of `name@domain.tld`. The email should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec production. Should only be specified by authenticated requests from a developer. */
      email?: string[];
      /** @description The federated user identifier of one or more accounts to fetch. Should only be specified by authenticated requests bearing a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      federatedUserId?: components["schemas"]["GoogleCloudIdentitytoolkitV1FederatedUserIdentifier"][];
      /** @description The Identity Platform ID token of the account to fetch. Require to be specified for requests from end users. */
      idToken?: string;
      /** @description The initial email of one or more accounts to fetch. The length of email should be less than 256 characters and in the format of `name@domain.tld`. The email should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec production. Should only be specified by authenticated requests from a developer. */
      initialEmail?: string[];
      /** @description The ID of one or more accounts to fetch. Should only be specified by authenticated requests bearing a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      localId?: string[];
      /** @description The phone number of one or more accounts to fetch. Should only be specified by authenticated requests from a developer and should be in E.164 format, for example, +15555555555. */
      phoneNumber?: string[];
      /** @description The ID of the Google Cloud project that the account or the Identity Platform tenant specified by `tenant_id` belongs to. Should only be specified by authenticated requests bearing a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      targetProjectId?: string;
      /** @description The ID of the tenant that the account belongs to. Should only be specified by authenticated requests from a developer. */
      tenantId?: string;
    };
    /** @description Response message for GetAccountInfo. */
    GoogleCloudIdentitytoolkitV1GetAccountInfoResponse: {
      kind?: string;
      /** @description The information of specific user account(s) matching the parameters in the request. */
      users?: components["schemas"]["GoogleCloudIdentitytoolkitV1UserInfo"][];
    };
    /** @description Request message for GetOobCode. */
    GoogleCloudIdentitytoolkitV1GetOobCodeRequest: {
      /** @description If an associated android app can handle the OOB code, whether or not to install the android app on the device where the link is opened if the app is not already installed. */
      androidInstallApp?: boolean;
      /** @description If an associated android app can handle the OOB code, the minimum version of the app. If the version on the device is lower than this version then the user is taken to Google Play Store to upgrade the app. */
      androidMinimumVersion?: string;
      /** @description If an associated android app can handle the OOB code, the Android package name of the android app that will handle the callback when this OOB code is used. This will allow the correct app to open if it is already installed, or allow Google Play Store to open to the correct app if it is not yet installed. */
      androidPackageName?: string;
      /** @description When set to true, the OOB code link will be be sent as a Universal Link or an Android App Link and will be opened by the corresponding app if installed. If not set, or set to false, the OOB code will be sent to the web widget first and then on continue will redirect to the app if installed. */
      canHandleCodeInApp?: boolean;
      /** @description For a PASSWORD_RESET request, a reCaptcha response is required when the system detects possible abuse activity. In those cases, this is the response from the reCaptcha challenge used to verify the caller. */
      captchaResp?: string;
      challenge?: string;
      /** @description The Url to continue after user clicks the link sent in email. This is the url that will allow the web widget to handle the OOB code. */
      continueUrl?: string;
      /** @description In order to ensure that the url used can be easily opened up in iOS or android, we create a [Firebase Dynamic Link](https://firebase.google.com/docs/dynamic-links). Most Identity Platform projects will only have one Dynamic Link domain enabled, and can leave this field blank. This field contains a specified Dynamic Link domain for projects that have multiple enabled. */
      dynamicLinkDomain?: string;
      /** @description The account's email address to send the OOB code to, and generally the email address of the account that needs to be updated. Required for PASSWORD_RESET, EMAIL_SIGNIN, and VERIFY_EMAIL. Only required for VERIFY_AND_CHANGE_EMAIL requests when return_oob_link is set to true. In this case, it is the original email of the user. */
      email?: string;
      /** @description If an associated iOS app can handle the OOB code, the App Store id of this app. This will allow App Store to open to the correct app if the app is not yet installed. */
      iOSAppStoreId?: string;
      /** @description If an associated iOS app can handle the OOB code, the iOS bundle id of this app. This will allow the correct app to open if it is already installed. */
      iOSBundleId?: string;
      /** @description An ID token for the account. It is required for VERIFY_AND_CHANGE_EMAIL and VERIFY_EMAIL requests unless return_oob_link is set to true. */
      idToken?: string;
      /** @description The email address the account is being updated to. Required only for VERIFY_AND_CHANGE_EMAIL requests. */
      newEmail?: string;
      /** @description Required. The type of out-of-band (OOB) code to send. Depending on this value, other fields in this request will be required and/or have different meanings. There are 4 different OOB codes that can be sent: * PASSWORD_RESET * EMAIL_SIGNIN * VERIFY_EMAIL * VERIFY_AND_CHANGE_EMAIL */
      requestType?:
        | "OOB_REQ_TYPE_UNSPECIFIED"
        | "PASSWORD_RESET"
        | "OLD_EMAIL_AGREE"
        | "NEW_EMAIL_ACCEPT"
        | "VERIFY_EMAIL"
        | "RECOVER_EMAIL"
        | "EMAIL_SIGNIN"
        | "VERIFY_AND_CHANGE_EMAIL"
        | "REVERT_SECOND_FACTOR_ADDITION";
      /** @description Whether the confirmation link containing the OOB code should be returned in the response (no email is sent). Used when a developer wants to construct the email template and send it on their own. By default this is false; to specify this field, and to set it to true, it requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control) */
      returnOobLink?: boolean;
      /** @description The Project ID of the Identity Platform project which the account belongs to. To specify this field, it requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      targetProjectId?: string;
      /** @description The tenant ID of the Identity Platform tenant the account belongs to. */
      tenantId?: string;
      /** @description The IP address of the caller. Required only for PASSWORD_RESET requests. */
      userIp?: string;
    };
    /** @description Response message for GetOobCode. */
    GoogleCloudIdentitytoolkitV1GetOobCodeResponse: {
      /** @description If return_oob_link is false in the request, the email address the verification was sent to. */
      email?: string;
      kind?: string;
      /** @description If return_oob_link is true in the request, the OOB code to send. */
      oobCode?: string;
      /** @description If return_oob_link is true in the request, the OOB link to be sent to the user. This returns the constructed link including [Firebase Dynamic Link](https://firebase.google.com/docs/dynamic-links) related parameters. */
      oobLink?: string;
    };
    /** @description Response message for GetProjectConfig. */
    GoogleCloudIdentitytoolkitV1GetProjectConfigResponse: {
      /** @description Whether to allow password account sign up. This field is only returned for authenticated calls from a developer. */
      allowPasswordUser?: boolean;
      /** @description Google Cloud API key. This field is only returned for authenticated calls from a developer. */
      apiKey?: string;
      /** @description Authorized domains for widget redirect. */
      authorizedDomains?: string[];
      changeEmailTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitV1EmailTemplate"];
      /** @description The Firebase Dynamic Links domain used to construct links for redirects to native apps. */
      dynamicLinksDomain?: string;
      /** @description Whether anonymous user is enabled. This field is only returned for authenticated calls from a developer. */
      enableAnonymousUser?: boolean;
      /** @description OAuth2 provider config. This field is only returned for authenticated calls from a developer. */
      idpConfig?: components["schemas"]["GoogleCloudIdentitytoolkitV1IdpConfig"][];
      legacyResetPasswordTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitV1EmailTemplate"];
      /** @description The project id of the retrieved configuration. */
      projectId?: string;
      resetPasswordTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitV1EmailTemplate"];
      revertSecondFactorAdditionTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitV1EmailTemplate"];
      /** @description Whether to use email sending. This field is only returned for authenticated calls from a developer. */
      useEmailSending?: boolean;
      verifyEmailTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitV1EmailTemplate"];
    };
    /** @description Response message for GetRecaptchaParam. */
    GoogleCloudIdentitytoolkitV1GetRecaptchaParamResponse: {
      kind?: string;
      /** @description The producer project number used to generate PIA tokens */
      producerProjectNumber?: string;
      /** @description The reCAPTCHA v2 site key used to invoke the reCAPTCHA service. Always present. */
      recaptchaSiteKey?: string;
      recaptchaStoken?: string;
    };
    /** @description Response message for GetSessionCookiePublicKeys. */
    GoogleCloudIdentitytoolkitV1GetSessionCookiePublicKeysResponse: {
      /** @description Public keys of the session cookie signer, formatted as [JSON Web Keys (JWK)](https://tools.ietf.org/html/rfc7517). */
      keys?: components["schemas"]["GoogleCloudIdentitytoolkitV1OpenIdConnectKey"][];
    };
    /** @description Config of an identity provider. */
    GoogleCloudIdentitytoolkitV1IdpConfig: {
      /** @description OAuth2 client ID. */
      clientId?: string;
      /** @description True if allows the user to sign in with the provider. */
      enabled?: boolean;
      /**
       * Format: int32
       * @description Percent of users who will be prompted/redirected federated login for this IdP
       */
      experimentPercent?: number;
      /** @description Name of the identity provider. */
      provider?:
        | "PROVIDER_UNSPECIFIED"
        | "MSLIVE"
        | "GOOGLE"
        | "FACEBOOK"
        | "PAYPAL"
        | "TWITTER"
        | "YAHOO"
        | "AOL"
        | "GITHUB"
        | "GOOGLE_PLAY_GAMES"
        | "LINKEDIN"
        | "IOS_GAME_CENTER";
      /** @description OAuth2 client secret. */
      secret?: string;
      /** @description Whitelisted client IDs for audience check. */
      whitelistedAudiences?: string[];
    };
    /** @description Request message for IssueSamlResponse. */
    GoogleCloudIdentitytoolkitV1IssueSamlResponseRequest: {
      /** @description The Identity Platform ID token. It will be verified and then converted to a new SAMLResponse. */
      idToken?: string;
      /** @description Relying Party identifier, which is the audience of issued SAMLResponse. */
      rpId?: string;
      /** @description SAML app entity id specified in Google Admin Console for each app. If developers want to redirect to a third-party app rather than a G Suite app, they'll probably they need this. When it's used, we'll return a RelayState. This includes a SAMLRequest, which can be used to trigger a SP-initiated SAML flow to redirect to the real app. */
      samlAppEntityId?: string;
    };
    /** @description Response for IssueSamlResponse request. */
    GoogleCloudIdentitytoolkitV1IssueSamlResponseResponse: {
      /** @description The ACS endpoint which consumes the returned SAMLResponse. */
      acsEndpoint?: string;
      /** @description Email of the user. */
      email?: string;
      /** @description First name of the user. */
      firstName?: string;
      /** @description Whether the logged in user was created by this request. */
      isNewUser?: boolean;
      /** @description Last name of the user. */
      lastName?: string;
      /** @description Generated RelayState. */
      relayState?: string;
      /** @description Signed SAMLResponse created for the Relying Party. */
      samlResponse?: string;
    };
    /** @description Information on which multi-factor authentication (MFA) providers are enabled for an account. */
    GoogleCloudIdentitytoolkitV1MfaEnrollment: {
      /** @description Display name for this mfa option e.g. "corp cell phone". */
      displayName?: string;
      /**
       * Format: google-datetime
       * @description Timestamp when the account enrolled this second factor.
       */
      enrolledAt?: string;
      /** @description ID of this MFA option. */
      mfaEnrollmentId?: string;
      /** @description Normally this will show the phone number associated with this enrollment. In some situations, such as after a first factor sign in, it will only show the obfuscated version of the associated phone number. */
      phoneInfo?: string;
      /** @description Output only. Unobfuscated phone_info. */
      unobfuscatedPhoneInfo?: string;
    };
    GoogleCloudIdentitytoolkitV1MfaFactor: {
      /** @description Display name for this mfa option e.g. "corp cell phone". */
      displayName?: string;
      /** @description Phone number to receive OTP for MFA. */
      phoneInfo?: string;
    };
    /** @description Multi-factor authentication related information. */
    GoogleCloudIdentitytoolkitV1MfaInfo: {
      /** @description The second factors the user has enrolled. */
      enrollments?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaEnrollment"][];
    };
    /** @description Represents a public key of the session cookie signer, formatted as a [JSON Web Key (JWK)](https://tools.ietf.org/html/rfc7517). */
    GoogleCloudIdentitytoolkitV1OpenIdConnectKey: {
      /** @description Signature algorithm. */
      alg?: string;
      /** @description Exponent for the RSA public key, it is represented as the base64url encoding of the value's big endian representation. */
      e?: string;
      /** @description Unique string to identify this key. */
      kid?: string;
      /** @description Key type. */
      kty?: string;
      /** @description Modulus for the RSA public key, it is represented as the base64url encoding of the value's big endian representation. */
      n?: string;
      /** @description Key use. */
      use?: string;
    };
    /** @description Information about the user as provided by various Identity Providers. */
    GoogleCloudIdentitytoolkitV1ProviderUserInfo: {
      /** @description The user's display name at the Identity Provider. */
      displayName?: string;
      /** @description The user's email address at the Identity Provider. */
      email?: string;
      /** @description The user's identifier at the Identity Provider. */
      federatedId?: string;
      /** @description The user's phone number at the Identity Provider. */
      phoneNumber?: string;
      /** @description The user's profile photo URL at the Identity Provider. */
      photoUrl?: string;
      /** @description The ID of the Identity Provider. */
      providerId?: string;
      /** @description The user's raw identifier directly returned from Identity Provider. */
      rawId?: string;
      /** @description The user's screen_name at Twitter or login name at GitHub. */
      screenName?: string;
    };
    /** @description Request message for QueryUserInfo. */
    GoogleCloudIdentitytoolkitV1QueryUserInfoRequest: {
      /** @description Query conditions used to filter results. If more than one is passed, only the first SqlExpression is evaluated. */
      expression?: components["schemas"]["GoogleCloudIdentitytoolkitV1SqlExpression"][];
      /**
       * Format: int64
       * @description The maximum number of accounts to return with an upper limit of __500__. Defaults to _500_. Only valid when `return_user_info` is set to `true`.
       */
      limit?: string;
      /**
       * Format: int64
       * @description The number of accounts to skip from the beginning of matching records. Only valid when `return_user_info` is set to `true`.
       */
      offset?: string;
      /** @description The order for sorting query result. Defaults to __ascending__ order. Only valid when `return_user_info` is set to `true`. */
      order?: "ORDER_UNSPECIFIED" | "ASC" | "DESC";
      /** @description If `true`, this request will return the accounts matching the query. If `false`, only the __count__ of accounts matching the query will be returned. Defaults to `true`. */
      returnUserInfo?: boolean;
      /** @description The field to use for sorting user accounts. Defaults to `USER_ID`. Note: when `phone_number` is specified in `expression`, the result ignores the sorting. Only valid when `return_user_info` is set to `true`. */
      sortBy?:
        | "SORT_BY_FIELD_UNSPECIFIED"
        | "USER_ID"
        | "NAME"
        | "CREATED_AT"
        | "LAST_LOGIN_AT"
        | "USER_EMAIL";
      /** @description The ID of the tenant to which the result is scoped. */
      tenantId?: string;
    };
    /** @description Response message for QueryUserInfo. */
    GoogleCloudIdentitytoolkitV1QueryUserInfoResponse: {
      /**
       * Format: int64
       * @description If `return_user_info` in the request is true, this is the number of returned accounts in this message. Otherwise, this is the total number of accounts matching the query.
       */
      recordsCount?: string;
      /** @description If `return_user_info` in the request is true, this is the accounts matching the query. */
      userInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1UserInfo"][];
    };
    /** @description Request message for ResetPassword. */
    GoogleCloudIdentitytoolkitV1ResetPasswordRequest: {
      /** @description The email of the account to be modified. Specify this and the old password in order to change an account's password without using an out-of-band code. */
      email?: string;
      /** @description The new password to be set for this account. Specifying this field will result in a change to the account and consume the out-of-band code if one was specified and it was of type PASSWORD_RESET. */
      newPassword?: string;
      /** @description The current password of the account to be modified. Specify this and email to change an account's password without using an out-of-band code. */
      oldPassword?: string;
      /** @description An out-of-band (OOB) code generated by GetOobCode request. Specify only this parameter (or only this parameter and a tenant ID) to get the out-of-band code's type in the response without mutating the account's state. Only a PASSWORD_RESET out-of-band code can be consumed via this method. */
      oobCode?: string;
      /** @description The tenant ID of the Identity Platform tenant the account belongs to. */
      tenantId?: string;
    };
    /** @description Response message for ResetPassword. */
    GoogleCloudIdentitytoolkitV1ResetPasswordResponse: {
      /** @description The email associated with the out-of-band code that was used. */
      email?: string;
      kind?: string;
      mfaInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaEnrollment"];
      newEmail?: string;
      requestType?:
        | "OOB_REQ_TYPE_UNSPECIFIED"
        | "PASSWORD_RESET"
        | "OLD_EMAIL_AGREE"
        | "NEW_EMAIL_ACCEPT"
        | "VERIFY_EMAIL"
        | "RECOVER_EMAIL"
        | "EMAIL_SIGNIN"
        | "VERIFY_AND_CHANGE_EMAIL"
        | "REVERT_SECOND_FACTOR_ADDITION";
    };
    /** @description Request message for SendVerificationCode. At least one of (`ios_receipt` and `ios_secret`), `recaptcha_token`, or `safety_net_token` must be specified to verify the verification code is being sent on behalf of a real app and not an emulator. */
    GoogleCloudIdentitytoolkitV1SendVerificationCodeRequest: {
      autoRetrievalInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1AutoRetrievalInfo"];
      /** @description Receipt of successful iOS app token validation. At least one of (`ios_receipt` and `ios_secret`), `recaptcha_token`, or `safety_net_token` must be specified to verify the verification code is being sent on behalf of a real app and not an emulator. This should come from the response of verifyIosClient. If present, the caller should also provide the `ios_secret`, as well as a bundle ID in the `x-ios-bundle-identifier` header, which must match the bundle ID from the verifyIosClient request. */
      iosReceipt?: string;
      /** @description Secret delivered to iOS app as a push notification. Should be passed with an `ios_receipt` as well as the `x-ios-bundle-identifier` header. */
      iosSecret?: string;
      /** @description The phone number to send the verification code to in E.164 format. */
      phoneNumber?: string;
      /** @description Recaptcha token for app verification. At least one of (`ios_receipt` and `ios_secret`), `recaptcha_token`, or `safety_net_token` must be specified to verify the verification code is being sent on behalf of a real app and not an emulator. The recaptcha should be generated by calling getRecaptchaParams and the recaptcha token will be generated on user completion of the recaptcha challenge. */
      recaptchaToken?: string;
      /** @description Android only. Used to assert application identity in place of a recaptcha token. At least one of (`ios_receipt` and `ios_secret`), `recaptcha_token`, or `safety_net_token` must be specified to verify the verification code is being sent on behalf of a real app and not an emulator. A SafetyNet Token can be generated via the [SafetyNet Android Attestation API](https://developer.android.com/training/safetynet/attestation.html), with the Base64 encoding of the `phone_number` field as the nonce. */
      safetyNetToken?: string;
      /** @description Tenant ID of the Identity Platform tenant the user is signing in to. */
      tenantId?: string;
    };
    /** @description Response message for SendVerificationCode. */
    GoogleCloudIdentitytoolkitV1SendVerificationCodeResponse: {
      /** @description Encrypted session information. This can be used in signInWithPhoneNumber to authenticate the phone number. */
      sessionInfo?: string;
    };
    /** @description Request message for SetAccountInfo. */
    GoogleCloudIdentitytoolkitV1SetAccountInfoRequest: {
      captchaChallenge?: string;
      /** @description The response from reCaptcha challenge. This is required when the system detects possible abuse activities. */
      captchaResponse?: string;
      /**
       * Format: int64
       * @description The timestamp in milliseconds when the account was created.
       */
      createdAt?: string;
      /** @description JSON formatted custom attributes to be stored in the Identity Platform ID token. Specifying this field requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
      customAttributes?: string;
      /** Format: int64 */
      delegatedProjectNumber?: string;
      /** @description The account's attributes to be deleted. */
      deleteAttribute?: (
        | "USER_ATTRIBUTE_NAME_UNSPECIFIED"
        | "EMAIL"
        | "DISPLAY_NAME"
        | "PROVIDER"
        | "PHOTO_URL"
        | "PASSWORD"
        | "RAW_USER_INFO"
      )[];
      /** @description The Identity Providers to unlink from the user's account. */
      deleteProvider?: string[];
      /** @description If true, marks the account as disabled, meaning the user will no longer be able to sign-in. */
      disableUser?: boolean;
      /** @description The user's new display name to be updated in the account's attributes. The length of the display name must be less than or equal to 256 characters. */
      displayName?: string;
      /** @description The user's new email to be updated in the account's attributes. The length of email should be less than 256 characters and in the format of `name@domain.tld`. The email should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec production. */
      email?: string;
      /** @description Whether the user's email has been verified. Specifying this field requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
      emailVerified?: boolean;
      /** @description A valid Identity Platform ID token. Required when attempting to change user-related information. */
      idToken?: string;
      instanceId?: string;
      /**
       * Format: int64
       * @description The timestamp in milliseconds when the account last logged in.
       */
      lastLoginAt?: string;
      linkProviderUserInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1ProviderUserInfo"];
      /** @description The ID of the user. Specifying this field requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). For requests from end-users, an ID token should be passed instead. */
      localId?: string;
      mfa?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaInfo"];
      /** @description The out-of-band code to be applied on the user's account. The following out-of-band code types are supported: * VERIFY_EMAIL * RECOVER_EMAIL * REVERT_SECOND_FACTOR_ADDITION * VERIFY_AND_CHANGE_EMAIL */
      oobCode?: string;
      /** @description The user's new password to be updated in the account's attributes. The password must be at least 6 characters long. */
      password?: string;
      /** @description The phone number to be updated in the account's attributes. */
      phoneNumber?: string;
      /** @description The user's new photo URL for the account's profile photo to be updated in the account's attributes. The length of the URL must be less than or equal to 2048 characters. */
      photoUrl?: string;
      /** @description The Identity Providers that the account should be associated with. */
      provider?: string[];
      /** @description Whether or not to return an ID and refresh token. Should always be true. */
      returnSecureToken?: boolean;
      /** @description The project ID for the project that the account belongs to. Specifying this field requires Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). Requests from end users should pass an Identity Platform ID token instead. */
      targetProjectId?: string;
      /** @description The tenant ID of the Identity Platform tenant that the account belongs to. Requests from end users should pass an Identity Platform ID token rather than setting this field. */
      tenantId?: string;
      /** @description Whether the account should be restricted to only using federated login. */
      upgradeToFederatedLogin?: boolean;
      /**
       * Format: int64
       * @description Specifies the minimum timestamp in seconds for an Identity Platform ID token to be considered valid.
       */
      validSince?: string;
    };
    /** @description Response message for SetAccountInfo */
    GoogleCloudIdentitytoolkitV1SetAccountInfoResponse: {
      /** @description The account's display name. */
      displayName?: string;
      /** @description The account's email address. */
      email?: string;
      /** @description Whether the account's email has been verified. */
      emailVerified?: boolean;
      /**
       * Format: int64
       * @description The number of seconds until the Identity Platform ID token expires.
       */
      expiresIn?: string;
      /** @description An Identity Platform ID token for the account. This is used for legacy user sign up. */
      idToken?: string;
      kind?: string;
      /** @description The ID of the authenticated user. */
      localId?: string;
      /** @description The new email that has been set on the user's account attributes. */
      newEmail?: string;
      /** @description Deprecated. No actual password hash is currently returned. */
      passwordHash?: string;
      /** @description The user's photo URL for the account's profile photo. */
      photoUrl?: string;
      /** @description The linked Identity Providers on the account. */
      providerUserInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1ProviderUserInfo"][];
      /** @description A refresh token for the account. This is used for legacy user sign up. */
      refreshToken?: string;
    };
    /** @description Request message for SignInWithCustomToken. */
    GoogleCloudIdentitytoolkitV1SignInWithCustomTokenRequest: {
      /** Format: int64 */
      delegatedProjectNumber?: string;
      instanceId?: string;
      /** @description Should always be true. */
      returnSecureToken?: boolean;
      /** @description The ID of the Identity Platform tenant the user is signing in to. If present, the ID should match the tenant_id in the token. */
      tenantId?: string;
      /** @description Required. The custom Auth token asserted by the developer. The token should be a [JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519) that includes the claims listed in the [API reference](https://cloud.google.com/identity-platform/docs/reference/rest/client/) under the "Custom Token Claims" section. */
      token?: string;
    };
    /** @description Response message for SignInWithCustomToken. */
    GoogleCloudIdentitytoolkitV1SignInWithCustomTokenResponse: {
      /**
       * Format: int64
       * @description The number of seconds until the ID token expires.
       */
      expiresIn?: string;
      /** @description An Identity Platform ID token for the authenticated user. */
      idToken?: string;
      /** @description Whether the authenticated user was created by this request. */
      isNewUser?: boolean;
      kind?: string;
      /** @description An Identity Platform refresh token for the authenticated user. */
      refreshToken?: string;
    };
    /** @description Request message for SignInWithEmailLink */
    GoogleCloudIdentitytoolkitV1SignInWithEmailLinkRequest: {
      /** @description Required. The email address the sign-in link was sent to. The length of email should be less than 256 characters and in the format of `name@domain.tld`. The email should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec production. */
      email?: string;
      /** @description A valid ID token for an Identity Platform account. If passed, this request will link the email address to the user represented by this ID token and enable sign-in with email link on the account for the future. */
      idToken?: string;
      /** @description Required. The out-of-band code from the email link. */
      oobCode?: string;
      /** @description The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description Response message for SignInWithEmailLink. */
    GoogleCloudIdentitytoolkitV1SignInWithEmailLinkResponse: {
      /** @description The email the user signed in with. Always present in the response. */
      email?: string;
      /**
       * Format: int64
       * @description The number of seconds until the ID token expires.
       */
      expiresIn?: string;
      /** @description An Identity Platform ID token for the authenticated user. */
      idToken?: string;
      /** @description Whether the authenticated user was created by this request. */
      isNewUser?: boolean;
      kind?: string;
      /** @description The ID of the authenticated user. Always present in the response. */
      localId?: string;
      /** @description Info on which multi-factor authentication providers are enabled. Present if the user needs to complete the sign-in using multi-factor authentication. */
      mfaInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaEnrollment"][];
      /** @description An opaque string that functions as proof that the user has successfully passed the first factor check. */
      mfaPendingCredential?: string;
      /** @description Refresh token for the authenticated user. */
      refreshToken?: string;
    };
    /** @description Request message for SignInWithGameCenter */
    GoogleCloudIdentitytoolkitV1SignInWithGameCenterRequest: {
      /** @description The user's Game Center display name. */
      displayName?: string;
      /** @description The user's Game Center game player ID. A unique identifier for a player of the game. https://developer.apple.com/documentation/gamekit/gkplayer/3113960-gameplayerid */
      gamePlayerId?: string;
      /** @description A valid ID token for an Identity Platform account. If present, this request will link the Game Center player ID to the account represented by this ID token. */
      idToken?: string;
      /** @description Required. The user's Game Center player ID. */
      playerId?: string;
      /** @description Required. The URL to fetch the Apple public key in order to verify the given signature is signed by Apple. */
      publicKeyUrl?: string;
      /** @description Required. A random string used to generate the given signature. */
      salt?: string;
      /** @description Required. The verification signature data generated by Apple. */
      signature?: string;
      /** @description The user's Game Center team player ID. A unique identifier for a player of all the games that you distribute using your developer account. https://developer.apple.com/documentation/gamekit/gkplayer/3174857-teamplayerid */
      teamPlayerId?: string;
      /** @description The ID of the Identity Platform tenant the user is signing in to. */
      tenantId?: string;
      /**
       * Format: int64
       * @description Required. The time when the signature was created by Apple, in milliseconds since the epoch.
       */
      timestamp?: string;
    };
    /** @description Response message for SignInWithGameCenter */
    GoogleCloudIdentitytoolkitV1SignInWithGameCenterResponse: {
      /** @description Display name of the authenticated user. */
      displayName?: string;
      /**
       * Format: int64
       * @description The number of seconds until the ID token expires.
       */
      expiresIn?: string;
      /** @description The user's Game Center game player ID. A unique identifier for a player of the game. https://developer.apple.com/documentation/gamekit/gkplayer/3113960-gameplayerid */
      gamePlayerId?: string;
      /** @description An Identity Platform ID token for the authenticated user. */
      idToken?: string;
      /** @description Whether the logged in user was created by this request. */
      isNewUser?: boolean;
      /** @description The ID of the authenticated user. Always present in the response. */
      localId?: string;
      /** @description The user's Game Center player ID. */
      playerId?: string;
      /** @description An Identity Platform refresh token for the authenticated user. */
      refreshToken?: string;
      /** @description The user's Game Center team player ID. A unique identifier for a player of all the games that you distribute using your developer account. https://developer.apple.com/documentation/gamekit/gkplayer/3174857-teamplayerid */
      teamPlayerId?: string;
    };
    /** @description Request message for SignInWithIdp. */
    GoogleCloudIdentitytoolkitV1SignInWithIdpRequest: {
      autoCreate?: boolean;
      /** Format: int64 */
      delegatedProjectNumber?: string;
      /** @description A valid Identity Platform ID token. If passed, the user's account at the IdP will be linked to the account represented by this ID token. */
      idToken?: string;
      pendingIdToken?: string;
      /** @description An opaque string from a previous SignInWithIdp response. If set, it can be used to repeat the sign-in operation from the previous SignInWithIdp operation. */
      pendingToken?: string;
      /** @description If the user is signing in with an authorization response obtained via a previous CreateAuthUri authorization request, this is the body of the HTTP POST callback from the IdP, if present. Otherwise, if the user is signing in with a manually provided IdP credential, this should be a URL-encoded form that contains the credential (e.g. an ID token or access token for OAuth 2.0 IdPs) and the provider ID of the IdP that issued the credential. For example, if the user is signing in to the Google provider using a Google ID token, this should be set to `id_token=[GOOGLE_ID_TOKEN]&providerId=google.com`, where `[GOOGLE_ID_TOKEN]` should be replaced with the Google ID token. If the user is signing in to the Facebook provider using a Facebook authentication token, this should be set to `id_token=[FACEBOOK_AUTHENTICATION_TOKEN]&providerId=facebook.com&nonce= [NONCE]`, where `[FACEBOOK_AUTHENTICATION_TOKEN]` should be replaced with the Facebook authentication token. Nonce is required for validating the token. The request will fail if no nonce is provided. If the user is signing in to the Facebook provider using a Facebook access token, this should be set to `access_token=[FACEBOOK_ACCESS_TOKEN]&providerId=facebook.com`, where `[FACEBOOK_ACCESS_TOKEN]` should be replaced with the Facebook access token. If the user is signing in to the Twitter provider using a Twitter OAuth 1.0 credential, this should be set to `access_token=[TWITTER_ACCESS_TOKEN]&oauth_token_secret=[TWITTER_TOKEN_SECRET]&providerId=twitter.com`, where `[TWITTER_ACCESS_TOKEN]` and `[TWITTER_TOKEN_SECRET]` should be replaced with the Twitter OAuth access token and Twitter OAuth token secret respectively. */
      postBody?: string;
      /** @description Required. The URL to which the IdP redirects the user back. This can be set to `http://localhost` if the user is signing in with a manually provided IdP credential. */
      requestUri?: string;
      /** @description Whether or not to return OAuth credentials from the IdP on the following errors: `FEDERATED_USER_ID_ALREADY_LINKED` and `EMAIL_EXISTS`. */
      returnIdpCredential?: boolean;
      /** @description Whether or not to return the OAuth refresh token from the IdP, if available. */
      returnRefreshToken?: boolean;
      /** @description Should always be true. */
      returnSecureToken?: boolean;
      /** @description The session ID returned from a previous CreateAuthUri call. This field is verified against that session ID to prevent session fixation attacks. Required if the user is signing in with an authorization response from a previous CreateAuthUri authorization request. */
      sessionId?: string;
      /** @description The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description Response message for SignInWithIdp. */
    GoogleCloudIdentitytoolkitV1SignInWithIdpResponse: {
      /** @description The opaque string set in CreateAuthUri that is used to maintain contextual information between the authentication request and the callback from the IdP. */
      context?: string;
      /** @description The date of birth for the user's account at the IdP. */
      dateOfBirth?: string;
      /** @description The display name for the user's account at the IdP. */
      displayName?: string;
      /** @description The email address of the user's account at the IdP. */
      email?: string;
      /** @description Whether or not there is an existing Identity Platform user account with the same email address but linked to a different account at the same IdP. Only present if the "One account per email address" setting is enabled and the email address at the IdP is verified. */
      emailRecycled?: boolean;
      /** @description Whether the user account's email address is verified. */
      emailVerified?: boolean;
      /** @description The error message returned if `return_idp_credential` is set to `true` and either the `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS` error is encountered. This field's value is either `FEDERATED_USER_ID_ALREADY_LINKED` or `EMAIL_EXISTS`. */
      errorMessage?: string;
      /**
       * Format: int64
       * @description The number of seconds until the Identity Platform ID token expires.
       */
      expiresIn?: string;
      /** @description The user's account ID at the IdP. Always present in the response. */
      federatedId?: string;
      /** @description The first name for the user's account at the IdP. */
      firstName?: string;
      /** @description The full name for the user's account at the IdP. */
      fullName?: string;
      /** @description An Identity Platform ID token for the authenticated user. */
      idToken?: string;
      inputEmail?: string;
      /** @description Whether or not a new Identity Platform account was created for the authenticated user. */
      isNewUser?: boolean;
      kind?: string;
      /** @description The language preference for the user's account at the IdP. */
      language?: string;
      /** @description The last name for the user's account at the IdP. */
      lastName?: string;
      /** @description The ID of the authenticated Identity Platform user. Always present in the response. */
      localId?: string;
      /** @description Info on which multi-factor authentication providers are enabled for the account. Present if the user needs to complete the sign-in using multi-factor authentication. */
      mfaInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaEnrollment"][];
      /** @description An opaque string that functions as proof that the user has successfully passed the first factor authentication. */
      mfaPendingCredential?: string;
      /** @description Whether or not there is an existing Identity Platform user account with the same email address as the current account signed in at the IdP, and the account's email addresss is not verified at the IdP. The user will need to sign in to the existing Identity Platform account and then link the current credential from the IdP to it. Only present if the "One account per email address" setting is enabled. */
      needConfirmation?: boolean;
      needEmail?: boolean;
      /** @description The nickname for the user's account at the IdP. */
      nickName?: string;
      /** @description The OAuth access token from the IdP, if available. */
      oauthAccessToken?: string;
      /** @description The OAuth 2.0 authorization code, if available. Only present for the Google provider. */
      oauthAuthorizationCode?: string;
      /**
       * Format: int32
       * @description The number of seconds until the OAuth access token from the IdP expires.
       */
      oauthExpireIn?: number;
      /** @description The OpenID Connect ID token from the IdP, if available. */
      oauthIdToken?: string;
      /** @description The OAuth 2.0 refresh token from the IdP, if available and `return_refresh_token` is set to `true`. */
      oauthRefreshToken?: string;
      /** @description The OAuth 1.0 token secret from the IdP, if available. Only present for the Twitter provider. */
      oauthTokenSecret?: string;
      /** @description The main (top-level) email address of the user's Identity Platform account, if different from the email address at the IdP. Only present if the "One account per email address" setting is enabled. */
      originalEmail?: string;
      /** @description An opaque string that can be used as a credential from the IdP the user is signing into. The pending token obtained here can be set in a future SignInWithIdp request to sign the same user in with the IdP again. */
      pendingToken?: string;
      /** @description The URL of the user's profile picture at the IdP. */
      photoUrl?: string;
      /** @description The provider ID of the IdP that the user is signing in to. Always present in the response. */
      providerId?: string;
      /** @description The stringified JSON response containing all the data corresponding to the user's account at the IdP. */
      rawUserInfo?: string;
      /** @description An Identity Platform refresh token for the authenticated user. */
      refreshToken?: string;
      /** @description The screen name for the user's account at the Twitter IdP or the login name for the user's account at the GitHub IdP. */
      screenName?: string;
      /** @description The value of the `tenant_id` field in the request. */
      tenantId?: string;
      /** @description The time zone for the user's account at the IdP. */
      timeZone?: string;
      /** @description A list of provider IDs that the user can sign in to in order to resolve a `need_confirmation` error. Only present if `need_confirmation` is set to `true`. */
      verifiedProvider?: string[];
    };
    /** @description Request message for SignInWithPassword. */
    GoogleCloudIdentitytoolkitV1SignInWithPasswordRequest: {
      captchaChallenge?: string;
      /** @description The reCAPTCHA token provided by the reCAPTCHA client-side integration. reCAPTCHA Enterprise uses it for risk assessment. Required when reCAPTCHA Enterprise is enabled. */
      captchaResponse?: string;
      /** Format: int64 */
      delegatedProjectNumber?: string;
      /** @description Required. The email the user is signing in with. The length of email should be less than 256 characters and in the format of `name@domain.tld`. The email should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec production. */
      email?: string;
      idToken?: string;
      instanceId?: string;
      /** @description Required. The password the user provides to sign in to the account. */
      password?: string;
      pendingIdToken?: string;
      /** @description Should always be true. */
      returnSecureToken?: boolean;
      /** @description The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform instance in the project. */
      tenantId?: string;
    };
    /** @description Response message for SignInWithPassword. */
    GoogleCloudIdentitytoolkitV1SignInWithPasswordResponse: {
      /** @description The user's display name stored in the account's attributes. */
      displayName?: string;
      /** @description The email of the authenticated user. Always present in the response. */
      email?: string;
      /**
       * Format: int64
       * @description The number of seconds until the Identity Platform ID token expires.
       */
      expiresIn?: string;
      /** @description An Identity Platform ID token for the authenticated user. */
      idToken?: string;
      kind?: string;
      /** @description The ID of the authenticated user. Always present in the response. */
      localId?: string;
      /** @description Info on which multi-factor authentication providers are enabled for the account. Present if the user needs to complete the sign-in using multi-factor authentication. */
      mfaInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaEnrollment"][];
      /** @description An opaque string that functions as proof that the user has successfully passed the first factor authentication. */
      mfaPendingCredential?: string;
      /** @description The OAuth2 access token. */
      oauthAccessToken?: string;
      oauthAuthorizationCode?: string;
      /**
       * Format: int32
       * @description The access token expiration time in seconds.
       */
      oauthExpireIn?: number;
      /** @description The user's profile picture stored in the account's attributes. */
      profilePicture?: string;
      /** @description An Identity Platform refresh token for the authenticated user. */
      refreshToken?: string;
      /** @description Whether the email is for an existing account. Always true. */
      registered?: boolean;
    };
    /** @description Request message for SignInWithPhoneNumber. */
    GoogleCloudIdentitytoolkitV1SignInWithPhoneNumberRequest: {
      /** @description User-entered verification code from an SMS sent to the user's phone. */
      code?: string;
      /** @description A valid ID token for an Identity Platform account. If passed, this request will link the phone number to the user represented by this ID token if the phone number is not in use, or will reauthenticate the user if the phone number is already linked to the user. */
      idToken?: string;
      operation?: "VERIFY_OP_UNSPECIFIED" | "SIGN_UP_OR_IN" | "REAUTH" | "UPDATE" | "LINK";
      /** @description The user's phone number to sign in with. This is necessary in the case of uing a temporary proof, in which case it must match the phone number that was authenticated in the request that generated the temporary proof. This field is ignored if a session info is passed. */
      phoneNumber?: string;
      /** @description Encrypted session information from the response of sendVerificationCode. In the case of authenticating with an SMS code this must be specified, but in the case of using a temporary proof it can be unspecified. */
      sessionInfo?: string;
      /** @description A proof of the phone number verification, provided from a previous signInWithPhoneNumber request. If this is passed, the caller must also pass in the phone_number field the phone number that was verified in the previous request. */
      temporaryProof?: string;
      /** @description The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project. */
      tenantId?: string;
      /** @description Do not use. */
      verificationProof?: string;
    };
    /** @description Response message for SignInWithPhoneNumber. */
    GoogleCloudIdentitytoolkitV1SignInWithPhoneNumberResponse: {
      /**
       * Format: int64
       * @description The number of seconds until the ID token expires.
       */
      expiresIn?: string;
      /** @description Identity Platform ID token for the authenticated user. */
      idToken?: string;
      /** @description Whether the authenticated user was created by this request. */
      isNewUser?: boolean;
      /** @description The id of the authenticated user. Present in the case of a successful authentication. In the case when the phone could be verified but the account operation could not be performed, a temporary proof will be returned instead. */
      localId?: string;
      /** @description Phone number of the authenticated user. Always present in the response. */
      phoneNumber?: string;
      /** @description Refresh token for the authenticated user. */
      refreshToken?: string;
      /** @description A proof of the phone number verification, provided if a phone authentication is successful but the user operation fails. This happens when the request tries to link a phone number to a user with an ID token or reauthenticate with an ID token but the phone number is linked to a different user. */
      temporaryProof?: string;
      /**
       * Format: int64
       * @description The number of seconds until the temporary proof expires.
       */
      temporaryProofExpiresIn?: string;
      /** @description Do not use. */
      verificationProof?: string;
      /**
       * Format: int64
       * @description Do not use.
       */
      verificationProofExpiresIn?: string;
    };
    /** @description Request message for SignUp. */
    GoogleCloudIdentitytoolkitV1SignUpRequest: {
      captchaChallenge?: string;
      /** @description The reCAPTCHA token provided by the reCAPTCHA client-side integration. reCAPTCHA Enterprise uses it for assessment. Required when reCAPTCHA enterprise is enabled. */
      captchaResponse?: string;
      /** @description Whether the user will be disabled upon creation. Disabled accounts are inaccessible except for requests bearing a Google OAuth2 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      disabled?: boolean;
      /** @description The display name of the user to be created. */
      displayName?: string;
      /** @description The email to assign to the created user. The length of the email should be less than 256 characters and in the format of `name@domain.tld`. The email should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec production. An anonymous user will be created if not provided. */
      email?: string;
      /** @description Whether the user's email is verified. Specifying this field requires a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      emailVerified?: boolean;
      /** @description A valid ID token for an Identity Platform user. If set, this request will link the authentication credential to the user represented by this ID token. For a non-admin request, both the `email` and `password` fields must be set. For an admin request, `local_id` must not be set. */
      idToken?: string;
      instanceId?: string;
      /** @description The ID of the user to create. The ID must be unique within the project that the user is being created under. Specifying this field requires a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      localId?: string;
      /** @description The multi-factor authentication providers for the user to create. */
      mfaInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaFactor"][];
      /** @description The password to assign to the created user. The password must be be at least 6 characters long. If set, the `email` field must also be set. */
      password?: string;
      /** @description The phone number of the user to create. Specifying this field requires a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
      phoneNumber?: string;
      /** @description The profile photo url of the user to create. */
      photoUrl?: string;
      /** @description The project ID of the project which the user should belong to. Specifying this field requires a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). If this is not set, the target project is inferred from the scope associated to the Bearer access token. */
      targetProjectId?: string;
      /** @description The ID of the Identity Platform tenant to create a user under. If not set, the user will be created under the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description Response message for SignUp. */
    GoogleCloudIdentitytoolkitV1SignUpResponse: {
      /** @description The created user's display name. */
      displayName?: string;
      /** @description The created user's email. */
      email?: string;
      /**
       * Format: int64
       * @description The number of seconds until the ID token expires.
       */
      expiresIn?: string;
      /** @description An Identity Platform ID token for the created user. This field is only set for non-admin requests. */
      idToken?: string;
      kind?: string;
      /** @description The ID of the created user. Always present in the response. */
      localId?: string;
      /** @description An Identity Platform refresh token for the created user. This field is only set for non-admin requests. */
      refreshToken?: string;
    };
    /** @description Query conditions used to filter results. */
    GoogleCloudIdentitytoolkitV1SqlExpression: {
      /** @description A case insensitive string that the account's email should match. Only one of `email`, `phone_number`, or `user_id` should be specified in a SqlExpression. If more than one is specified, only the first (in that order) will be applied. */
      email?: string;
      /** @description A string that the account's phone number should match. Only one of `email`, `phone_number`, or `user_id` should be specified in a SqlExpression. If more than one is specified, only the first (in that order) will be applied. */
      phoneNumber?: string;
      /** @description A string that the account's local ID should match. Only one of `email`, `phone_number`, or `user_id` should be specified in a SqlExpression If more than one is specified, only the first (in that order) will be applied. */
      userId?: string;
    };
    /** @description Request message for UploadAccount. */
    GoogleCloudIdentitytoolkitV1UploadAccountRequest: {
      /** @description Whether to overwrite an existing account in Identity Platform with a matching `local_id` in the request. If true, the existing account will be overwritten. If false, an error will be returned. */
      allowOverwrite?: boolean;
      argon2Parameters?: components["schemas"]["GoogleCloudIdentitytoolkitV1Argon2Parameters"];
      /**
       * Format: int32
       * @description The block size parameter used by the STANDARD_SCRYPT hashing function. This parameter, along with parallelization and cpu_mem_cost help tune the resources needed to hash a password, and should be tuned as processor speeds and memory technologies advance.
       */
      blockSize?: number;
      /**
       * Format: int32
       * @description The CPU memory cost parameter to be used by the STANDARD_SCRYPT hashing function. This parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a password, and should be tuned as processor speeds and memory technologies advance.
       */
      cpuMemCost?: number;
      /** Format: int64 */
      delegatedProjectNumber?: string;
      /**
       * Format: int32
       * @description The desired key length for the STANDARD_SCRYPT hashing function. Must be at least 1.
       */
      dkLen?: number;
      /** @description Required. The hashing function used to hash the account passwords. Must be one of the following: * HMAC_SHA256 * HMAC_SHA1 * HMAC_MD5 * SCRYPT * PBKDF_SHA1 * MD5 * HMAC_SHA512 * SHA1 * BCRYPT * PBKDF2_SHA256 * SHA256 * SHA512 * STANDARD_SCRYPT * ARGON2 */
      hashAlgorithm?: string;
      /**
       * Format: int32
       * @description Memory cost for hash calculation. Only required when the hashing function is SCRYPT.
       */
      memoryCost?: number;
      /**
       * Format: int32
       * @description The parallelization cost parameter to be used by the STANDARD_SCRYPT hashing function. This parameter, along with block_size and cpu_mem_cost help tune the resources needed to hash a password, and should be tuned as processor speeds and memory technologies advance.
       */
      parallelization?: number;
      /** @description Password and salt order when verify password. */
      passwordHashOrder?: "UNSPECIFIED_ORDER" | "SALT_AND_PASSWORD" | "PASSWORD_AND_SALT";
      /**
       * Format: int32
       * @description The number of rounds used for hash calculation. Only required for the following hashing functions: * MD5 * SHA1 * SHA256 * SHA512 * PBKDF_SHA1 * PBKDF2_SHA256 * SCRYPT
       */
      rounds?: number;
      /**
       * Format: byte
       * @description One or more bytes to be inserted between the salt and plain text password. For stronger security, this should be a single non-printable character.
       */
      saltSeparator?: string;
      /** @description If true, the service will do the following list of checks before an account is uploaded: * Duplicate emails * Duplicate federated IDs * Federated ID provider validation If the duplication exists within the list of accounts to be uploaded, it will prevent the entire list from being uploaded. If the email or federated ID is a duplicate of a user already within the project/tenant, the account will not be uploaded, but the rest of the accounts will be unaffected. If false, these checks will be skipped. */
      sanityCheck?: boolean;
      /**
       * Format: byte
       * @description The signer key used to hash the password. Required for the following hashing functions: * SCRYPT, * HMAC_MD5, * HMAC_SHA1, * HMAC_SHA256, * HMAC_SHA512
       */
      signerKey?: string;
      /** @description The ID of the Identity Platform tenant the account belongs to. */
      tenantId?: string;
      /** @description A list of accounts to upload. `local_id` is required for each user; everything else is optional. */
      users?: components["schemas"]["GoogleCloudIdentitytoolkitV1UserInfo"][];
    };
    /** @description Response message for UploadAccount. */
    GoogleCloudIdentitytoolkitV1UploadAccountResponse: {
      /** @description Detailed error info for accounts that cannot be uploaded. */
      error?: components["schemas"]["GoogleCloudIdentitytoolkitV1ErrorInfo"][];
      kind?: string;
    };
    /** @description An Identity Platform account's information. */
    GoogleCloudIdentitytoolkitV1UserInfo: {
      /**
       * Format: int64
       * @description The time, in milliseconds from epoch, when the account was created.
       */
      createdAt?: string;
      /** @description Custom claims to be added to any ID tokens minted for the account. Should be at most 1,000 characters in length and in valid JSON format. */
      customAttributes?: string;
      /** @description Output only. Whether this account has been authenticated using SignInWithCustomToken. */
      customAuth?: boolean;
      /** @description Output only. The date of birth set for the account. This account attribute is not used by Identity Platform. It is available for informational purposes only. */
      dateOfBirth?: string;
      /** @description Whether the account is disabled. Disabled accounts are inaccessible except for requests bearing a Google OAuth2 credential with proper permissions. */
      disabled?: boolean;
      /** @description The display name of the account. This account attribute is not used by Identity Platform. It is available for informational purposes only. */
      displayName?: string;
      /** @description The account's email address. The length of the email should be less than 256 characters and in the format of `name@domain.tld`. The email should also match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec. */
      email?: string;
      /** @description Output only. Whether the account can authenticate with email link. */
      emailLinkSignin?: boolean;
      /** @description Whether the account's email address has been verified. */
      emailVerified?: boolean;
      /** @description The first email address associated with this account. The account's initial email cannot be changed once set and is used to recover access to this account if lost via the RECOVER_EMAIL flow in GetOobCode. Should match the [RFC 822](https://tools.ietf.org/html/rfc822) addr-spec. */
      initialEmail?: string;
      /** @description Output only. The language preference of the account. This account attribute is not used by Identity Platform. It is available for informational purposes only. */
      language?: string;
      /**
       * Format: int64
       * @description The last time, in milliseconds from epoch, this account was logged into.
       */
      lastLoginAt?: string;
      /**
       * Format: google-datetime
       * @description Timestamp when an ID token was last minted for this account.
       */
      lastRefreshAt?: string;
      /** @description Immutable. The unique ID of the account. */
      localId?: string;
      /** @description Information on which multi-factor authentication providers are enabled for this account. */
      mfaInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1MfaEnrollment"][];
      /**
       * Format: byte
       * @description The account's hashed password. Only accessible by requests bearing a Google OAuth2 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control).
       */
      passwordHash?: string;
      /**
       * Format: double
       * @description The timestamp, in milliseconds from the epoch of 1970-01-01T00:00:00Z, when the account's password was last updated.
       */
      passwordUpdatedAt?: number;
      /** @description The account's phone number. */
      phoneNumber?: string;
      /** @description The URL of the account's profile photo. This account attribute is not used by Identity Platform. It is available for informational purposes only. */
      photoUrl?: string;
      /** @description Information about the user as provided by various Identity Providers. */
      providerUserInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV1ProviderUserInfo"][];
      /** @description Input only. Plain text password used to update a account's password. This field is only ever used as input in a request. Identity Platform uses cryptographically secure hashing when managing passwords and will never store or transmit a user's password in plain text. */
      rawPassword?: string;
      /**
       * Format: byte
       * @description The account's password salt. Only accessible by requests bearing a Google OAuth2 credential with proper permissions.
       */
      salt?: string;
      /** @description Output only. This account's screen name at Twitter or login name at GitHub. */
      screenName?: string;
      /** @description ID of the tenant this account belongs to. Only set if this account belongs to a tenant. */
      tenantId?: string;
      /** @description Output only. The time zone preference of the account. This account attribute is not used by Identity Platform. It is available for informational purposes only. */
      timeZone?: string;
      /**
       * Format: int64
       * @description Oldest timestamp, in seconds since epoch, that an ID token should be considered valid. All ID tokens issued before this time are considered invalid.
       */
      validSince?: string;
      /**
       * Format: int32
       * @description The version of the account's password. Only accessible by requests bearing a Google OAuth2 credential with proper permissions.
       */
      version?: number;
    };
    /** @description Request message for VerifyIosClient */
    GoogleCloudIdentitytoolkitV1VerifyIosClientRequest: {
      /** @description A device token that the iOS client gets after registering to APNs (Apple Push Notification service). */
      appToken?: string;
      /** @description Whether the app token is in the iOS sandbox. If false, the app token is in the production environment. */
      isSandbox?: boolean;
    };
    /** @description Response message for VerifyIosClient. */
    GoogleCloudIdentitytoolkitV1VerifyIosClientResponse: {
      /** @description Receipt of successful app token validation. */
      receipt?: string;
      /**
       * Format: int64
       * @description Suggested time that the client should wait in seconds for delivery of the push notification.
       */
      suggestedTimeout?: string;
    };
    /** @description Defines a policy of allowing every region by default and adding disallowed regions to a disallow list. */
    GoogleCloudIdentitytoolkitAdminV2AllowByDefault: {
      /** @description Two letter unicode region codes to disallow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json */
      disallowedRegions?: string[];
    };
    /** @description Defines a policy of only allowing regions by explicitly adding them to an allowlist. */
    GoogleCloudIdentitytoolkitAdminV2AllowlistOnly: {
      /** @description Two letter unicode region codes to allow as defined by https://cldr.unicode.org/ The full list of these region codes is here: https://github.com/unicode-cldr/cldr-localenames-full/blob/master/main/en/territories.json */
      allowedRegions?: string[];
    };
    /** @description Configuration options related to authenticating an anonymous user. */
    GoogleCloudIdentitytoolkitAdminV2Anonymous: {
      /** @description Whether anonymous user auth is enabled for the project or not. */
      enabled?: boolean;
    };
    /** @description Additional config for SignInWithApple. */
    GoogleCloudIdentitytoolkitAdminV2AppleSignInConfig: {
      /** @description A list of Bundle ID's usable by this project */
      bundleIds?: string[];
      codeFlowConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2CodeFlowConfig"];
    };
    /** @description Configuration related to Blocking Functions. */
    GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig: {
      forwardInboundCredentials?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials"];
      /** @description Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn" */
      triggers?: {
        [key: string]: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Trigger"];
      };
    };
    /** @description Options related to how clients making requests on behalf of a project should be configured. */
    GoogleCloudIdentitytoolkitAdminV2ClientConfig: {
      /** @description Output only. API key that can be used when making requests for this project. */
      apiKey?: string;
      /** @description Output only. Firebase subdomain. */
      firebaseSubdomain?: string;
      permissions?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Permissions"];
    };
    /** @description Options related to how clients making requests on behalf of a tenant should be configured. */
    GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig: {
      permissions?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ClientPermissions"];
    };
    /** @description Configuration related to restricting a user's ability to affect their account. */
    GoogleCloudIdentitytoolkitAdminV2ClientPermissions: {
      /** @description When true, end users cannot delete their account on the associated project through any of our API methods */
      disabledUserDeletion?: boolean;
      /** @description When true, end users cannot sign up for a new account on the associated project through any of our API methods */
      disabledUserSignup?: boolean;
    };
    /** @description Additional config for Apple for code flow. */
    GoogleCloudIdentitytoolkitAdminV2CodeFlowConfig: {
      /** @description Key ID for the private key. */
      keyId?: string;
      /** @description Private key used for signing the client secret JWT. */
      privateKey?: string;
      /** @description Apple Developer Team ID. */
      teamId?: string;
    };
    /** @description Represents an Identity Toolkit project. */
    GoogleCloudIdentitytoolkitAdminV2Config: {
      /** @description List of domains authorized for OAuth redirects */
      authorizedDomains?: string[];
      /** @description Whether anonymous users will be auto-deleted after a period of 30 days. */
      autodeleteAnonymousUsers?: boolean;
      blockingFunctions?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig"];
      client?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ClientConfig"];
      emailPrivacyConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig"];
      mfa?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig"];
      monitoring?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2MonitoringConfig"];
      multiTenant?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig"];
      /** @description Output only. The name of the Config resource. Example: "projects/my-awesome-project/config" */
      name?: string;
      notification?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2NotificationConfig"];
      quota?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2QuotaConfig"];
      signIn?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SignInConfig"];
      smsRegionConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig"];
      /** @description Output only. The subtype of this config. */
      subtype?: "SUBTYPE_UNSPECIFIED" | "IDENTITY_PLATFORM" | "FIREBASE_AUTH";
    };
    /** @description Standard Identity Toolkit-trusted IDPs. */
    GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdp: {
      /** @description Description of the Idp */
      description?: string;
      /** @description Id the of Idp */
      idpId?: string;
    };
    /** @description Configurations options for authenticating with a the standard set of Identity Toolkit-trusted IDPs. */
    GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig: {
      appleSignInConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2AppleSignInConfig"];
      /** @description OAuth client ID. */
      clientId?: string;
      /** @description OAuth client secret. */
      clientSecret?: string;
      /** @description True if allows the user to sign in with the provider. */
      enabled?: boolean;
      /** @description The name of the DefaultSupportedIdpConfig resource, for example: "projects/my-awesome-project/defaultSupportedIdpConfigs/google.com" */
      name?: string;
    };
    /** @description Information of custom domain DNS verification. By default, default_domain will be used. A custom domain can be configured using VerifyCustomDomain. */
    GoogleCloudIdentitytoolkitAdminV2DnsInfo: {
      /** @description Output only. The applied verified custom domain. */
      customDomain?: string;
      /** @description Output only. The current verification state of the custom domain. The custom domain will only be used once the domain verification is successful. */
      customDomainState?:
        | "VERIFICATION_STATE_UNSPECIFIED"
        | "NOT_STARTED"
        | "IN_PROGRESS"
        | "FAILED"
        | "SUCCEEDED";
      /**
       * Format: google-datetime
       * @description Output only. The timestamp of initial request for the current domain verification.
       */
      domainVerificationRequestTime?: string;
      /** @description Output only. The custom domain that's to be verified. */
      pendingCustomDomain?: string;
      /** @description Whether to use custom domain. */
      useCustomDomain?: boolean;
    };
    /** @description Configuration options related to authenticating a user by their email address. */
    GoogleCloudIdentitytoolkitAdminV2Email: {
      /** @description Whether email auth is enabled for the project or not. */
      enabled?: boolean;
      /** @description Whether a password is required for email auth or not. If true, both an email and password must be provided to sign in. If false, a user may sign in via either email/password or email link. */
      passwordRequired?: boolean;
    };
    /** @description Configuration for settings related to email privacy and public visibility. Settings in this config protect against email enumeration, but may make some trade-offs in user-friendliness. */
    GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig: {
      /** @description Migrates the project to a state of improved email privacy. For example certain error codes are more generic to avoid giving away information on whether the account exists. In addition, this disables certain features that as a side-effect allow user enumeration. Enabling this toggle disables the fetchSignInMethodsForEmail functionality and changing the user's email to an unverified email. It is recommended to remove dependence on this functionality and enable this toggle to improve user privacy. */
      enableImprovedEmailPrivacy?: boolean;
    };
    /** @description Email template. The subject and body fields can contain the following placeholders which will be replaced with the appropriate values: %LINK% - The link to use to redeem the send OOB code. %EMAIL% - The email where the email is being sent. %NEW_EMAIL% - The new email being set for the account (when applicable). %APP_NAME% - The GCP project's display name. %DISPLAY_NAME% - The user's display name. */
    GoogleCloudIdentitytoolkitAdminV2EmailTemplate: {
      /** @description Email body */
      body?: string;
      /** @description Email body format */
      bodyFormat?: "BODY_FORMAT_UNSPECIFIED" | "PLAIN_TEXT" | "HTML";
      /** @description Output only. Whether the body or subject of the email is customized. */
      customized?: boolean;
      /** @description Reply-to address */
      replyTo?: string;
      /** @description Sender display name */
      senderDisplayName?: string;
      /** @description Local part of From address */
      senderLocalPart?: string;
      /** @description Subject of the email */
      subject?: string;
    };
    /** @description Indicates which credentials to pass to the registered Blocking Functions. */
    GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials: {
      /** @description Whether to pass the user's OAuth identity provider's access token. */
      accessToken?: boolean;
      /** @description Whether to pass the user's OIDC identity provider's ID token. */
      idToken?: boolean;
      /** @description Whether to pass the user's OAuth identity provider's refresh token. */
      refreshToken?: boolean;
    };
    /** @description History information of the hash algorithm and key. Different accounts' passwords may be generated by different version. */
    GoogleCloudIdentitytoolkitAdminV2HashConfig: {
      /** @description Output only. Different password hash algorithms used in Identity Toolkit. */
      algorithm?:
        | "HASH_ALGORITHM_UNSPECIFIED"
        | "HMAC_SHA256"
        | "HMAC_SHA1"
        | "HMAC_MD5"
        | "SCRYPT"
        | "PBKDF_SHA1"
        | "MD5"
        | "HMAC_SHA512"
        | "SHA1"
        | "BCRYPT"
        | "PBKDF2_SHA256"
        | "SHA256"
        | "SHA512"
        | "STANDARD_SCRYPT";
      /**
       * Format: int32
       * @description Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
       */
      memoryCost?: number;
      /**
       * Format: int32
       * @description Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
       */
      rounds?: number;
      /** @description Output only. Non-printable character to be inserted between the salt and plain text password in base64. */
      saltSeparator?: string;
      /** @description Output only. Signer key in base64. */
      signerKey?: string;
    };
    /** @description The IDP's certificate data to verify the signature in the SAMLResponse issued by the IDP. */
    GoogleCloudIdentitytoolkitAdminV2IdpCertificate: {
      /** @description The x509 certificate */
      x509Certificate?: string;
    };
    /** @description The SAML IdP (Identity Provider) configuration when the project acts as the relying party. */
    GoogleCloudIdentitytoolkitAdminV2IdpConfig: {
      /** @description IDP's public keys for verifying signature in the assertions. */
      idpCertificates?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2IdpCertificate"][];
      /** @description Unique identifier for all SAML entities. */
      idpEntityId?: string;
      /** @description Indicates if outbounding SAMLRequest should be signed. */
      signRequest?: boolean;
      /** @description URL to send Authentication request to. */
      ssoUrl?: string;
    };
    /** @description A pair of SAML RP-IDP configurations when the project acts as the relying party. */
    GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig: {
      /** @description The config's display name set by developers. */
      displayName?: string;
      /** @description True if allows the user to sign in with the provider. */
      enabled?: boolean;
      idpConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2IdpConfig"];
      /** @description The name of the InboundSamlConfig resource, for example: 'projects/my-awesome-project/inboundSamlConfigs/my-config-id'. Ignored during create requests. */
      name?: string;
      spConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SpConfig"];
    };
    /** @description Settings that the tenants will inherit from project level. */
    GoogleCloudIdentitytoolkitAdminV2Inheritance: {
      /** @description Whether to allow the tenant to inherit custom domains, email templates, and custom SMTP settings. If true, email sent from tenant will follow the project level email sending configurations. If false (by default), emails will go with the default settings with no customizations. */
      emailSendingConfig?: boolean;
    };
    /** @description Request for InitializeIdentityPlatform. */
    GoogleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformRequest: { [key: string]: unknown };
    /** @description Response for InitializeIdentityPlatform. Empty for now. */
    GoogleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformResponse: { [key: string]: unknown };
    /** @description Response for DefaultSupportedIdpConfigs */
    GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse: {
      /** @description The set of configs. */
      defaultSupportedIdpConfigs?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"][];
      /** @description Token to retrieve the next page of results, or empty if there are no more results in the list. */
      nextPageToken?: string;
    };
    /** @description Response for ListDefaultSupportedIdps */
    GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpsResponse: {
      /** @description The set of configs. */
      defaultSupportedIdps?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdp"][];
      /** @description Token to retrieve the next page of results, or empty if there are no more results in the list. */
      nextPageToken?: string;
    };
    /** @description Response for ListInboundSamlConfigs */
    GoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse: {
      /** @description The set of configs. */
      inboundSamlConfigs?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"][];
      /** @description Token to retrieve the next page of results, or empty if there are no more results in the list. */
      nextPageToken?: string;
    };
    /** @description Response for ListOAuthIdpConfigs */
    GoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse: {
      /** @description Token to retrieve the next page of results, or empty if there are no more results in the list. */
      nextPageToken?: string;
      /** @description The set of configs. */
      oauthIdpConfigs?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"][];
    };
    /** @description Response message for ListTenants. */
    GoogleCloudIdentitytoolkitAdminV2ListTenantsResponse: {
      /** @description The token to get the next page of results. */
      nextPageToken?: string;
      /** @description A list of tenants under the given agent project. */
      tenants?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Tenant"][];
    };
    /** @description Configuration related to monitoring project activity. */
    GoogleCloudIdentitytoolkitAdminV2MonitoringConfig: {
      requestLogging?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2RequestLogging"];
    };
    /** @description Options related to MultiFactor Authentication for the project. */
    GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig: {
      /** @description A list of usable second factors for this project. */
      enabledProviders?: ("PROVIDER_UNSPECIFIED" | "PHONE_SMS")[];
      /** @description Whether MultiFactor Authentication has been enabled for this project. */
      state?: "STATE_UNSPECIFIED" | "DISABLED" | "ENABLED" | "MANDATORY";
    };
    /** @description Configuration related to multi-tenant functionality. */
    GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig: {
      /** @description Whether this project can have tenants or not. */
      allowTenants?: boolean;
      /** @description The default cloud parent org or folder that the tenant project should be created under. The parent resource name should be in the format of "/", such as "folders/123" or "organizations/456". If the value is not set, the tenant will be created under the same organization or folder as the agent project. */
      defaultTenantLocation?: string;
    };
    /** @description Configuration related to sending notifications to users. */
    GoogleCloudIdentitytoolkitAdminV2NotificationConfig: {
      /** @description Default locale used for email and SMS in IETF BCP 47 format. */
      defaultLocale?: string;
      sendEmail?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SendEmail"];
      sendSms?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SendSms"];
    };
    /** @description Configuration options for authenticating with an OAuth IDP. */
    GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig: {
      /** @description The client id of an OAuth client. */
      clientId?: string;
      /** @description The client secret of the OAuth client, to enable OIDC code flow. */
      clientSecret?: string;
      /** @description The config's display name set by developers. */
      displayName?: string;
      /** @description True if allows the user to sign in with the provider. */
      enabled?: boolean;
      /** @description For OIDC Idps, the issuer identifier. */
      issuer?: string;
      /** @description The name of the OAuthIdpConfig resource, for example: 'projects/my-awesome-project/oauthIdpConfigs/oauth-config-id'. Ignored during create requests. */
      name?: string;
      responseType?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthResponseType"];
    };
    /** @description The response type to request for in the OAuth authorization flow. You can set either `id_token` or `code` to true, but not both. Setting both types to be simultaneously true (`{code: true, id_token: true}`) is not yet supported. See https://openid.net/specs/openid-connect-core-1_0.html#Authentication for a mapping of response type to OAuth 2.0 flow. */
    GoogleCloudIdentitytoolkitAdminV2OAuthResponseType: {
      /** @description If true, authorization code is returned from IdP's authorization endpoint. */
      code?: boolean;
      /** @description If true, ID token is returned from IdP's authorization endpoint. */
      idToken?: boolean;
      /** @description Do not use. The `token` response type is not supported at the moment. */
      token?: boolean;
    };
    /** @description Configuration related to restricting a user's ability to affect their account. */
    GoogleCloudIdentitytoolkitAdminV2Permissions: {
      /** @description When true, end users cannot delete their account on the associated project through any of our API methods */
      disabledUserDeletion?: boolean;
      /** @description When true, end users cannot sign up for a new account on the associated project through any of our API methods */
      disabledUserSignup?: boolean;
    };
    /** @description Configuration options related to authenticated a user by their phone number. */
    GoogleCloudIdentitytoolkitAdminV2PhoneNumber: {
      /** @description Whether phone number auth is enabled for the project or not. */
      enabled?: boolean;
      /** @description A map of that can be used for phone auth testing. */
      testPhoneNumbers?: { [key: string]: string };
    };
    /** @description Configuration related to quotas. */
    GoogleCloudIdentitytoolkitAdminV2QuotaConfig: {
      signUpQuotaConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2TemporaryQuota"];
    };
    /** @description Configuration for logging requests made to this project to Stackdriver Logging */
    GoogleCloudIdentitytoolkitAdminV2RequestLogging: {
      /** @description Whether logging is enabled for this project or not. */
      enabled?: boolean;
    };
    /** @description Options for email sending. */
    GoogleCloudIdentitytoolkitAdminV2SendEmail: {
      /** @description action url in email template. */
      callbackUri?: string;
      changeEmailTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2EmailTemplate"];
      dnsInfo?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DnsInfo"];
      legacyResetPasswordTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2EmailTemplate"];
      /** @description The method used for sending an email. */
      method?: "METHOD_UNSPECIFIED" | "DEFAULT" | "CUSTOM_SMTP";
      resetPasswordTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2EmailTemplate"];
      revertSecondFactorAdditionTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2EmailTemplate"];
      smtp?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Smtp"];
      verifyEmailTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2EmailTemplate"];
    };
    /** @description Options for SMS sending. */
    GoogleCloudIdentitytoolkitAdminV2SendSms: {
      smsTemplate?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SmsTemplate"];
      /** @description Whether to use the accept_language header for SMS. */
      useDeviceLocale?: boolean;
    };
    /** @description Configuration related to local sign in methods. */
    GoogleCloudIdentitytoolkitAdminV2SignInConfig: {
      /** @description Whether to allow more than one account to have the same email. */
      allowDuplicateEmails?: boolean;
      anonymous?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Anonymous"];
      email?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Email"];
      hashConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2HashConfig"];
      phoneNumber?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2PhoneNumber"];
    };
    /** @description Configures the regions where users are allowed to send verification SMS for the project or tenant. This is based on the calling code of the destination phone number. */
    GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig: {
      allowByDefault?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2AllowByDefault"];
      allowlistOnly?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2AllowlistOnly"];
    };
    /** @description The template to use when sending an SMS. */
    GoogleCloudIdentitytoolkitAdminV2SmsTemplate: {
      /** @description Output only. The SMS's content. Can contain the following placeholders which will be replaced with the appropriate values: %APP_NAME% - For Android or iOS apps, the app's display name. For web apps, the domain hosting the application. %LOGIN_CODE% - The OOB code being sent in the SMS. */
      content?: string;
    };
    /** @description Configuration for SMTP relay */
    GoogleCloudIdentitytoolkitAdminV2Smtp: {
      /** @description SMTP relay host */
      host?: string;
      /** @description SMTP relay password */
      password?: string;
      /**
       * Format: int32
       * @description SMTP relay port
       */
      port?: number;
      /** @description SMTP security mode. */
      securityMode?: "SECURITY_MODE_UNSPECIFIED" | "SSL" | "START_TLS";
      /** @description Sender email for the SMTP relay */
      senderEmail?: string;
      /** @description SMTP relay username */
      username?: string;
    };
    /** @description The SP's certificate data for IDP to verify the SAMLRequest generated by the SP. */
    GoogleCloudIdentitytoolkitAdminV2SpCertificate: {
      /**
       * Format: google-datetime
       * @description Timestamp of the cert expiration instance.
       */
      expiresAt?: string;
      /** @description Self-signed public certificate. */
      x509Certificate?: string;
    };
    /** @description The SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an authentication assertion issued by a SAML identity provider. */
    GoogleCloudIdentitytoolkitAdminV2SpConfig: {
      /** @description Callback URI where responses from IDP are handled. */
      callbackUri?: string;
      /** @description Output only. Public certificates generated by the server to verify the signature in SAMLRequest in the SP-initiated flow. */
      spCertificates?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SpCertificate"][];
      /** @description Unique identifier for all SAML entities. */
      spEntityId?: string;
    };
    /** @description Temporary quota increase / decrease */
    GoogleCloudIdentitytoolkitAdminV2TemporaryQuota: {
      /**
       * Format: int64
       * @description Corresponds to the 'refill_token_count' field in QuotaServer config
       */
      quota?: string;
      /**
       * Format: google-duration
       * @description How long this quota will be active for
       */
      quotaDuration?: string;
      /**
       * Format: google-datetime
       * @description When this quota will take affect
       */
      startTime?: string;
    };
    /** @description A Tenant contains configuration for the tenant in a multi-tenant project. */
    GoogleCloudIdentitytoolkitAdminV2Tenant: {
      /** @description Whether to allow email/password user authentication. */
      allowPasswordSignup?: boolean;
      /** @description Whether anonymous users will be auto-deleted after a period of 30 days. */
      autodeleteAnonymousUsers?: boolean;
      client?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig"];
      /** @description Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users. */
      disableAuth?: boolean;
      /** @description Display name of the tenant. */
      displayName?: string;
      emailPrivacyConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig"];
      /** @description Whether to enable anonymous user authentication. */
      enableAnonymousUser?: boolean;
      /** @description Whether to enable email link user authentication. */
      enableEmailLinkSignin?: boolean;
      hashConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2HashConfig"];
      inheritance?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Inheritance"];
      mfaConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig"];
      monitoring?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2MonitoringConfig"];
      /** @description Output only. Resource name of a tenant. For example: "projects/{project-id}/tenants/{tenant-id}" */
      name?: string;
      smsRegionConfig?: components["schemas"]["GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig"];
      /** @description A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded). */
      testPhoneNumbers?: { [key: string]: string };
    };
    /** @description Synchronous Cloud Function with HTTP Trigger */
    GoogleCloudIdentitytoolkitAdminV2Trigger: {
      /** @description HTTP URI trigger for the Cloud Function. */
      functionUri?: string;
      /**
       * Format: google-datetime
       * @description When the trigger was changed.
       */
      updateTime?: string;
    };
    /** @description The information required to auto-retrieve an SMS. */
    GoogleCloudIdentitytoolkitV2AutoRetrievalInfo: {
      /** @description The Android app's signature hash for Google Play Service's SMS Retriever API. */
      appSignatureHash?: string;
    };
    /** @description Finishes enrolling a second factor for the user. */
    GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest: {
      /** @description Display name which is entered by users to distinguish between different second factors with same type or different type. */
      displayName?: string;
      /** @description Required. ID token. */
      idToken?: string;
      phoneVerificationInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo"];
      /** @description The ID of the Identity Platform tenant that the user enrolling MFA belongs to. If not set, the user belongs to the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description FinalizeMfaEnrollment response. */
    GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse: {
      /** @description ID token updated to reflect MFA enrollment. */
      idToken?: string;
      phoneAuthInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneResponseInfo"];
      /** @description Refresh token updated to reflect MFA enrollment. */
      refreshToken?: string;
    };
    /** @description Phone Verification info for a FinalizeMfa request. */
    GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo: {
      /** @description Android only. Uses for "instant" phone number verification though GmsCore. */
      androidVerificationProof?: string;
      /** @description User-entered verification code. */
      code?: string;
      /** @description Required if Android verification proof is presented. */
      phoneNumber?: string;
      /** @description An opaque string that represents the enrollment session. */
      sessionInfo?: string;
    };
    /** @description Phone Verification info for a FinalizeMfa response. */
    GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneResponseInfo: {
      /** @description Android only. Long-lived replacement for valid code tied to android device. */
      androidVerificationProof?: string;
      /**
       * Format: google-datetime
       * @description Android only. Expiration time of verification proof in seconds.
       */
      androidVerificationProofExpireTime?: string;
      /** @description For Android verification proof. */
      phoneNumber?: string;
    };
    /** @description Finalizes sign-in by verifying MFA challenge. */
    GoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest: {
      /** @description Required. Pending credential from first factor sign-in. */
      mfaPendingCredential?: string;
      phoneVerificationInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneRequestInfo"];
      /** @description The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description FinalizeMfaSignIn response. */
    GoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse: {
      /** @description ID token for the authenticated user. */
      idToken?: string;
      phoneAuthInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaPhoneResponseInfo"];
      /** @description Refresh token for the authenticated user. */
      refreshToken?: string;
    };
    /** @description Sends MFA enrollment verification SMS for a user. */
    GoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest: {
      /** @description Required. User's ID token. */
      idToken?: string;
      phoneEnrollmentInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo"];
      /** @description The ID of the Identity Platform tenant that the user enrolling MFA belongs to. If not set, the user belongs to the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description StartMfaEnrollment response. */
    GoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse: {
      phoneSessionInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaPhoneResponseInfo"];
    };
    /** @description App Verification info for a StartMfa request. */
    GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo: {
      autoRetrievalInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2AutoRetrievalInfo"];
      /** @description iOS only. Receipt of successful app token validation with APNS. */
      iosReceipt?: string;
      /** @description iOS only. Secret delivered to iOS app via APNS. */
      iosSecret?: string;
      /** @description Required for enrollment. Phone number to be enrolled as MFA. */
      phoneNumber?: string;
      /** @description Web only. Recaptcha solution. */
      recaptchaToken?: string;
      /** @description Android only. Used to assert application identity in place of a recaptcha token. A SafetyNet Token can be generated via the [SafetyNet Android Attestation API](https://developer.android.com/training/safetynet/attestation.html), with the Base64 encoding of the `phone_number` field as the nonce. */
      safetyNetToken?: string;
    };
    /** @description Phone Verification info for a StartMfa response. */
    GoogleCloudIdentitytoolkitV2StartMfaPhoneResponseInfo: {
      /** @description An opaque string that represents the enrollment session. */
      sessionInfo?: string;
    };
    /** @description Starts multi-factor sign-in by sending the multi-factor auth challenge. */
    GoogleCloudIdentitytoolkitV2StartMfaSignInRequest: {
      /** @description Required. MFA enrollment id from the user's list of current MFA enrollments. */
      mfaEnrollmentId?: string;
      /** @description Required. Pending credential from first factor sign-in. */
      mfaPendingCredential?: string;
      phoneSignInInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo"];
      /** @description The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description StartMfaSignIn response. */
    GoogleCloudIdentitytoolkitV2StartMfaSignInResponse: {
      phoneResponseInfo?: components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaPhoneResponseInfo"];
    };
    /** @description Withdraws MFA. */
    GoogleCloudIdentitytoolkitV2WithdrawMfaRequest: {
      /** @description Required. User's ID token. */
      idToken?: string;
      /** @description Required. MFA enrollment id from a current MFA enrollment. */
      mfaEnrollmentId?: string;
      /** @description The ID of the Identity Platform tenant that the user unenrolling MFA belongs to. If not set, the user belongs to the default Identity Platform project. */
      tenantId?: string;
    };
    /** @description Withdraws MultiFactorAuth response. */
    GoogleCloudIdentitytoolkitV2WithdrawMfaResponse: {
      /** @description ID token updated to reflect removal of the second factor. */
      idToken?: string;
      /** @description Refresh token updated to reflect removal of the second factor. */
      refreshToken?: string;
    };
    /** @description Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging. */
    GoogleIamV1AuditConfig: {
      /** @description The configuration for logging of each type of permission. */
      auditLogConfigs?: components["schemas"]["GoogleIamV1AuditLogConfig"][];
      /** @description Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
      service?: string;
    };
    /** @description Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging. */
    GoogleIamV1AuditLogConfig: {
      /** @description Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members. */
      exemptedMembers?: string[];
      /** @description The log type that this config enables. */
      logType?: "LOG_TYPE_UNSPECIFIED" | "ADMIN_READ" | "DATA_WRITE" | "DATA_READ";
    };
    /** @description Associates `members`, or principals, with a `role`. */
    GoogleIamV1Binding: {
      condition?: components["schemas"]["GoogleTypeExpr"];
      /** @description Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. */
      members?: string[];
      /** @description Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
      role?: string;
    };
    /** @description Request message for `GetIamPolicy` method. */
    GoogleIamV1GetIamPolicyRequest: {
      options?: components["schemas"]["GoogleIamV1GetPolicyOptions"];
    };
    /** @description Encapsulates settings provided to GetIamPolicy. */
    GoogleIamV1GetPolicyOptions: {
      /**
       * Format: int32
       * @description Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
       */
      requestedPolicyVersion?: number;
    };
    /** @description An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
    GoogleIamV1Policy: {
      /** @description Specifies cloud audit logging configuration for this policy. */
      auditConfigs?: components["schemas"]["GoogleIamV1AuditConfig"][];
      /** @description Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`. */
      bindings?: components["schemas"]["GoogleIamV1Binding"][];
      /**
       * Format: byte
       * @description `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
       */
      etag?: string;
      /**
       * Format: int32
       * @description Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
       */
      version?: number;
    };
    /** @description Request message for `SetIamPolicy` method. */
    GoogleIamV1SetIamPolicyRequest: {
      policy?: components["schemas"]["GoogleIamV1Policy"];
      /**
       * Format: google-fieldmask
       * @description OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
       */
      updateMask?: string;
    };
    /** @description Request message for `TestIamPermissions` method. */
    GoogleIamV1TestIamPermissionsRequest: {
      /** @description The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions). */
      permissions?: string[];
    };
    /** @description Response message for `TestIamPermissions` method. */
    GoogleIamV1TestIamPermissionsResponse: {
      /** @description A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
      permissions?: string[];
    };
    /** @description A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } */
    GoogleProtobufEmpty: { [key: string]: unknown };
    /** @description Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
    GoogleTypeExpr: {
      /** @description Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
      description?: string;
      /** @description Textual representation of an expression in Common Expression Language syntax. */
      expression?: string;
      /** @description Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
      location?: string;
      /** @description Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
      title?: string;
    };
    GrantTokenRequest: {
      /** @description ID token to exchange for an access token and a refresh token. This field is called `code` to conform with the OAuth 2.0 specification. This field is deprecated and is ignored. */
      code?: string;
      /** @description The grant_types that are supported: - `refresh_token` to exchange a Identity Platform refresh_token for Identity Platform id_token/access_token and possibly a new Identity Platform refresh_token. */
      grantType?: string;
      /** @description Identity Platform refresh_token. This field is ignored if `grantType` isn't `refresh_token`. */
      refreshToken?: string;
    };
    GrantTokenResponse: {
      /** @description DEPRECATED The granted access token. */
      access_token?: string;
      /**
       * Format: int64
       * @description Expiration time of `access_token` in seconds.
       */
      expires_in?: string;
      /** @description The granted ID token */
      id_token?: string;
      /**
       * Format: int64
       * @description The client's project number
       */
      project_id?: string;
      /** @description The granted refresh token; might be the same as `refreshToken` in the request. */
      refresh_token?: string;
      /** @description The type of `access_token`. Included to conform with the OAuth 2.0 specification; always `Bearer`. */
      token_type?: string;
      /** @description The local user ID */
      user_id?: string;
    };
    /** @description Emulator-specific configuration. */
    EmulatorV1ProjectsConfig: {
      signIn?: {
        allowDuplicateEmails?: boolean;
      };
    };
    /** @description Details of all pending confirmation codes. */
    EmulatorV1ProjectsOobCodes: {
      oobCodes?: {
        email?: string;
        oobCode?: string;
        oobLink?: string;
        requestType?: string;
      }[];
    };
    /** @description Details of all pending verification codes. */
    EmulatorV1ProjectsVerificationCodes: {
      verificationCodes?: {
        code?: string;
        phoneNumber?: string;
        sessionInfo?: string;
      }[];
    };
  };
  parameters: {
    /** @description OAuth access token. */
    access_token: string;
    /** @description Data format for response. */
    alt: "json" | "media" | "proto";
    /** @description JSONP */
    callback: string;
    /** @description Selector specifying which fields to include in a partial response. */
    fields: string;
    /** @description OAuth 2.0 token for the current user. */
    oauth_token: string;
    /** @description Returns response with indentations and line breaks. */
    prettyPrint: boolean;
    /** @description Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
    quotaUser: string;
    /** @description Legacy upload protocol for media (e.g. "media", "multipart"). */
    uploadType: string;
    /** @description Upload protocol for media (e.g. "raw", "multipart"). */
    upload_protocol: string;
  };
  requestBodies: {
    GoogleCloudIdentitytoolkitV1BatchDeleteAccountsRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1BatchDeleteAccountsRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1SignUpRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SignUpRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1DeleteAccountRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1DeleteAccountRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1UploadAccountRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1UploadAccountRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1CreateSessionCookieRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1CreateSessionCookieRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1GetAccountInfoRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1GetAccountInfoRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1GetOobCodeRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1GetOobCodeRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1SetAccountInfoRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SetAccountInfoRequest"];
      };
    };
    GoogleCloudIdentitytoolkitV1QueryUserInfoRequest: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1QueryUserInfoRequest"];
      };
    };
    GoogleCloudIdentitytoolkitAdminV2Tenant: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Tenant"];
      };
    };
    GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
      };
    };
    GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
      };
    };
    GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
      };
    };
  };
}

export interface operations {
  /** If an email identifier is specified, checks and returns if any user account is registered with the email. If there is a registered account, fetches all providers associated with the account's email. If the provider ID of an Identity Provider (IdP) is specified, creates an authorization URI for the IdP. The user can be directed to this URI to sign in with the IdP. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.createAuthUri": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1CreateAuthUriResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1CreateAuthUriRequest"];
      };
    };
  };
  /** Deletes a user's account. */
  "identitytoolkit.accounts.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1DeleteAccountResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1DeleteAccountRequest"];
  };
  /** Experimental */
  "identitytoolkit.accounts.issueSamlResponse": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1IssueSamlResponseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1IssueSamlResponseRequest"];
      };
    };
  };
  /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
  "identitytoolkit.accounts.lookup": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetAccountInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1GetAccountInfoRequest"];
  };
  /** Resets the password of an account either using an out-of-band code generated by sendOobCode or by specifying the email and password of the account to be modified. Can also check the purpose of an out-of-band code without consuming it. */
  "identitytoolkit.accounts.resetPassword": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1ResetPasswordResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1ResetPasswordRequest"];
      };
    };
  };
  /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
  "identitytoolkit.accounts.sendOobCode": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetOobCodeResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1GetOobCodeRequest"];
  };
  /** Sends a SMS verification code for phone number sign-in. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.sendVerificationCode": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SendVerificationCodeResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SendVerificationCodeRequest"];
      };
    };
  };
  /** Signs in or signs up a user by exchanging a custom Auth token. Upon a successful sign-in or sign-up, a new Identity Platform ID token and refresh token are issued for the user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.signInWithCustomToken": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithCustomTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithCustomTokenRequest"];
      };
    };
  };
  /** Signs in or signs up a user with a out-of-band code from an email link. If a user does not exist with the given email address, a user record will be created. If the sign-in succeeds, an Identity Platform ID and refresh token are issued for the authenticated user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.signInWithEmailLink": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithEmailLinkResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithEmailLinkRequest"];
      };
    };
  };
  /** Signs in or signs up a user with iOS Game Center credentials. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. The bundle ID is required in the request header as `x-ios-bundle-identifier`. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.signInWithGameCenter": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithGameCenterResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithGameCenterRequest"];
      };
    };
  };
  /** Signs in or signs up a user using credentials from an Identity Provider (IdP). This is done by manually providing an IdP credential, or by providing the authorization response obtained via the authorization request from CreateAuthUri. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. A new Identity Platform user account will be created if the user has not previously signed in to the IdP with the same account. In addition, when the "One account per email address" setting is enabled, there should not be an existing Identity Platform user account with the same email address for a new user account to be created. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.signInWithIdp": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithIdpResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithIdpRequest"];
      };
    };
  };
  /** Signs in a user with email and password. If the sign-in succeeds, a new Identity Platform ID token and refresh token are issued for the authenticated user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.signInWithPassword": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithPasswordResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithPasswordRequest"];
      };
    };
  };
  /** Completes a phone number authentication attempt. If a user already exists with the given phone number, an ID token is minted for that user. Otherwise, a new user is created and associated with the phone number. This method may also be used to link a phone number to an existing user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.signInWithPhoneNumber": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithPhoneNumberResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1SignInWithPhoneNumberRequest"];
      };
    };
  };
  /** Signs up a new email and password user or anonymous user, or upgrades an anonymous user to email and password. For an admin request with a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control), creates a new anonymous, email and password, or phone number user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.signUp": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignUpResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1SignUpRequest"];
  };
  /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
  "identitytoolkit.accounts.update": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SetAccountInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1SetAccountInfoRequest"];
  };
  /** Verifies an iOS client is a real iOS device. If the request is valid, a receipt will be sent in the response and a secret will be sent via Apple Push Notification Service. The client should send both of them back to certain Identity Platform APIs in a later call (for example, /accounts:sendVerificationCode), in order to verify the client. The bundle ID is required in the request header as `x-ios-bundle-identifier`. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.accounts.verifyIosClient": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1VerifyIosClientResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV1VerifyIosClientRequest"];
      };
    };
  };
  /** Signs up a new email and password user or anonymous user, or upgrades an anonymous user to email and password. For an admin request with a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control), creates a new anonymous, email and password, or phone number user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.projects.accounts": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The project ID of the project which the user should belong to. Specifying this field requires a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). If this is not set, the target project is inferred from the scope associated to the Bearer access token. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignUpResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1SignUpRequest"];
  };
  /** Creates a session cookie for the given Identity Platform ID token. The session cookie is used by the client to preserve the user's login state. */
  "identitytoolkit.projects.createSessionCookie": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the project that the account belongs to. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1CreateSessionCookieResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1CreateSessionCookieRequest"];
  };
  /** Looks up user accounts within a project or a tenant based on conditions in the request. */
  "identitytoolkit.projects.queryAccounts": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the project to which the result is scoped. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1QueryUserInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1QueryUserInfoRequest"];
  };
  /** Uploads multiple accounts into the Google Cloud project. If there is a problem uploading one or more of the accounts, the rest will be uploaded, and a list of the errors will be returned. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
  "identitytoolkit.projects.accounts.batchCreate": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The Project ID of the Identity Platform project which the account belongs to. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1UploadAccountResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1UploadAccountRequest"];
  };
  /** Batch deletes multiple accounts. For accounts that fail to be deleted, error info is contained in the response. The method ignores accounts that do not exist or are duplicated in the request. This method requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
  "identitytoolkit.projects.accounts.batchDelete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** If `tenant_id` is specified, the ID of the Google Cloud project that the Identity Platform tenant belongs to. Otherwise, the ID of the Google Cloud project that accounts belong to. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1BatchDeleteAccountsResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1BatchDeleteAccountsRequest"];
  };
  /** Download account information for all accounts on the project in a paginated manner. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control).. Furthermore, additional permissions are needed to get password hash, password salt, and password version from accounts; otherwise these fields are redacted. */
  "identitytoolkit.projects.accounts.batchGet": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        delegatedProjectNumber?: string;
        /** The maximum number of results to return. Must be at least 1 and no greater than 1000. By default, it is 20. */
        maxResults?: number;
        /** The pagination token from the response of a previous request. */
        nextPageToken?: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId?: string;
      };
      path: {
        /** If `tenant_id` is specified, the ID of the Google Cloud project that the Identity Platform tenant belongs to. Otherwise, the ID of the Google Cloud project that the accounts belong to. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1DownloadAccountResponse"];
        };
      };
    };
  };
  /** Deletes a user's account. */
  "identitytoolkit.projects.accounts.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the project which the account belongs to. Should only be specified in authenticated requests that specify local_id of an account. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1DeleteAccountResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1DeleteAccountRequest"];
  };
  /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
  "identitytoolkit.projects.accounts.lookup": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the Google Cloud project that the account or the Identity Platform tenant specified by `tenant_id` belongs to. Should only be specified by authenticated requests bearing a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetAccountInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1GetAccountInfoRequest"];
  };
  /** Looks up user accounts within a project or a tenant based on conditions in the request. */
  "identitytoolkit.projects.accounts.query": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the project to which the result is scoped. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1QueryUserInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1QueryUserInfoRequest"];
  };
  /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
  "identitytoolkit.projects.accounts.sendOobCode": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The Project ID of the Identity Platform project which the account belongs to. To specify this field, it requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetOobCodeResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1GetOobCodeRequest"];
  };
  /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
  "identitytoolkit.projects.accounts.update": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The project ID for the project that the account belongs to. Specifying this field requires Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). Requests from end users should pass an Identity Platform ID token instead. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SetAccountInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1SetAccountInfoRequest"];
  };
  /** Signs up a new email and password user or anonymous user, or upgrades an anonymous user to email and password. For an admin request with a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control), creates a new anonymous, email and password, or phone number user. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project. */
  "identitytoolkit.projects.tenants.accounts": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The project ID of the project which the user should belong to. Specifying this field requires a Google OAuth 2.0 credential with the proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). If this is not set, the target project is inferred from the scope associated to the Bearer access token. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant to create a user under. If not set, the user will be created under the default Identity Platform project. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SignUpResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1SignUpRequest"];
  };
  /** Creates a session cookie for the given Identity Platform ID token. The session cookie is used by the client to preserve the user's login state. */
  "identitytoolkit.projects.tenants.createSessionCookie": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the project that the account belongs to. */
        targetProjectId: string;
        /** The tenant ID of the Identity Platform tenant the account belongs to. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1CreateSessionCookieResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1CreateSessionCookieRequest"];
  };
  /** Uploads multiple accounts into the Google Cloud project. If there is a problem uploading one or more of the accounts, the rest will be uploaded, and a list of the errors will be returned. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
  "identitytoolkit.projects.tenants.accounts.batchCreate": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The Project ID of the Identity Platform project which the account belongs to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the account belongs to. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1UploadAccountResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1UploadAccountRequest"];
  };
  /** Batch deletes multiple accounts. For accounts that fail to be deleted, error info is contained in the response. The method ignores accounts that do not exist or are duplicated in the request. This method requires a Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). */
  "identitytoolkit.projects.tenants.accounts.batchDelete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** If `tenant_id` is specified, the ID of the Google Cloud project that the Identity Platform tenant belongs to. Otherwise, the ID of the Google Cloud project that accounts belong to. */
        targetProjectId: string;
        /** If the accounts belong to an Identity Platform tenant, the ID of the tenant. If the accounts belong to an default Identity Platform project, the field is not needed. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1BatchDeleteAccountsResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1BatchDeleteAccountsRequest"];
  };
  /** Download account information for all accounts on the project in a paginated manner. To use this method requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control).. Furthermore, additional permissions are needed to get password hash, password salt, and password version from accounts; otherwise these fields are redacted. */
  "identitytoolkit.projects.tenants.accounts.batchGet": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        delegatedProjectNumber?: string;
        /** The maximum number of results to return. Must be at least 1 and no greater than 1000. By default, it is 20. */
        maxResults?: number;
        /** The pagination token from the response of a previous request. */
        nextPageToken?: string;
      };
      path: {
        /** If `tenant_id` is specified, the ID of the Google Cloud project that the Identity Platform tenant belongs to. Otherwise, the ID of the Google Cloud project that the accounts belong to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1DownloadAccountResponse"];
        };
      };
    };
  };
  /** Deletes a user's account. */
  "identitytoolkit.projects.tenants.accounts.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the project which the account belongs to. Should only be specified in authenticated requests that specify local_id of an account. */
        targetProjectId: string;
        /** The ID of the tenant that the account belongs to, if applicable. Only require to be specified for authenticated requests bearing a Google OAuth 2.0 credential that specify local_id of an account that belongs to an Identity Platform tenant. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1DeleteAccountResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1DeleteAccountRequest"];
  };
  /** Gets account information for all matched accounts. For an end user request, retrieves the account of the end user. For an admin request with Google OAuth 2.0 credential, retrieves one or multiple account(s) with matching criteria. */
  "identitytoolkit.projects.tenants.accounts.lookup": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the Google Cloud project that the account or the Identity Platform tenant specified by `tenant_id` belongs to. Should only be specified by authenticated requests bearing a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
        targetProjectId: string;
        /** The ID of the tenant that the account belongs to. Should only be specified by authenticated requests from a developer. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetAccountInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1GetAccountInfoRequest"];
  };
  /** Looks up user accounts within a project or a tenant based on conditions in the request. */
  "identitytoolkit.projects.tenants.accounts.query": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The ID of the project to which the result is scoped. */
        targetProjectId: string;
        /** The ID of the tenant to which the result is scoped. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1QueryUserInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1QueryUserInfoRequest"];
  };
  /** Sends an out-of-band confirmation code for an account. Requests from a authenticated request can optionally return a link including the OOB code instead of sending it. */
  "identitytoolkit.projects.tenants.accounts.sendOobCode": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The Project ID of the Identity Platform project which the account belongs to. To specify this field, it requires a Google OAuth 2.0 credential with proper [permissions](https://cloud.google.com/identity-platform/docs/access-control). */
        targetProjectId: string;
        /** The tenant ID of the Identity Platform tenant the account belongs to. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetOobCodeResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1GetOobCodeRequest"];
  };
  /** Updates account-related information for the specified user by setting specific fields or applying action codes. Requests from administrators and end users are supported. */
  "identitytoolkit.projects.tenants.accounts.update": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        /** The project ID for the project that the account belongs to. Specifying this field requires Google OAuth 2.0 credential with proper [permissions] (https://cloud.google.com/identity-platform/docs/access-control). Requests from end users should pass an Identity Platform ID token instead. */
        targetProjectId: string;
        /** The tenant ID of the Identity Platform tenant that the account belongs to. Requests from end users should pass an Identity Platform ID token rather than setting this field. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1SetAccountInfoResponse"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitV1SetAccountInfoRequest"];
  };
  /** Gets a project's public Identity Toolkit configuration. (Legacy) This method also supports authenticated calls from a developer to retrieve non-public configuration. */
  "identitytoolkit.getProjects": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** Android package name to check against the real android package name. If this field is provided, and sha1_cert_hash is not provided, the action will throw an error if this does not match the real android package name. */
        androidPackageName?: string;
        /** The RP OAuth client ID. If set, a check will be performed to ensure that the OAuth client is valid for the retrieved project and the request rejected with a client error if not valid. */
        clientId?: string;
        /** Project Number of the delegated project request. This field should only be used as part of the Firebase V1 migration. */
        delegatedProjectNumber?: string;
        /** The Firebase app ID, for applications that use Firebase. This can be found in the Firebase console for your project. If set, a check will be performed to ensure that the app ID is valid for the retrieved project. If not valid, the request will be rejected with a client error. */
        firebaseAppId?: string;
        /** iOS bundle id to check against the real ios bundle id. If this field is provided, the action will throw an error if this does not match the real iOS bundle id. */
        iosBundleId?: string;
        /** Project number of the configuration to retrieve. This field is deprecated and should not be used by new integrations. */
        projectNumber?: string;
        /** Whether dynamic link should be returned. */
        returnDynamicLink?: boolean;
        /** SHA-1 Android application cert hash. If set, a check will be performed to ensure that the cert hash is valid for the retrieved project and android_package_name. */
        sha1Cert?: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetProjectConfigResponse"];
        };
      };
    };
  };
  /** Gets parameters needed for generating a reCAPTCHA challenge. */
  "identitytoolkit.getRecaptchaParams": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetRecaptchaParamResponse"];
        };
      };
    };
  };
  /** Retrieves the set of public keys of the session cookie JSON Web Token (JWT) signer that can be used to validate the session cookie created through createSessionCookie. */
  "identitytoolkit.getSessionCookiePublicKeys": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV1GetSessionCookiePublicKeysResponse"];
        };
      };
    };
  };
  /** Finishes enrolling a second factor for the user. */
  "identitytoolkit.accounts.mfaEnrollment.finalize": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest"];
      };
    };
  };
  /** Step one of the MFA enrollment process. In SMS case, this sends an SMS verification code to the user. */
  "identitytoolkit.accounts.mfaEnrollment.start": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest"];
      };
    };
  };
  /** Revokes one second factor from the enrolled second factors for an account. */
  "identitytoolkit.accounts.mfaEnrollment.withdraw": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV2WithdrawMfaResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV2WithdrawMfaRequest"];
      };
    };
  };
  /** Verifies the MFA challenge and performs sign-in */
  "identitytoolkit.accounts.mfaSignIn.finalize": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest"];
      };
    };
  };
  /** Sends the MFA challenge */
  "identitytoolkit.accounts.mfaSignIn.start": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaSignInResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitV2StartMfaSignInRequest"];
      };
    };
  };
  /** List all default supported Idps. */
  "identitytoolkit.defaultSupportedIdps.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of items to return. */
        pageSize?: number;
        /** The next_page_token value returned from a previous List request, if any. */
        pageToken?: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpsResponse"];
        };
      };
    };
  };
  /** Retrieve an Identity Toolkit project configuration. */
  "identitytoolkit.projects.getConfig": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Config"];
        };
      };
    };
  };
  /** Update an Identity Toolkit project configuration. */
  "identitytoolkit.projects.updateConfig": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The update mask applies to the resource. Fields set in the config but not included in this update mask will be ignored. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Config"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Config"];
      };
    };
  };
  /** List all default supported Idp configurations for an Identity Toolkit project. */
  "identitytoolkit.projects.defaultSupportedIdpConfigs.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of items to return. */
        pageSize?: number;
        /** The next_page_token value returned from a previous List request, if any. */
        pageToken?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse"];
        };
      };
    };
  };
  /** Create a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.defaultSupportedIdpConfigs.create": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The id of the Idp to create a config for. Call ListDefaultSupportedIdps for list of all default supported Idps. */
        idpId?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
  };
  /** Retrieve a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.defaultSupportedIdpConfigs.get": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        defaultSupportedIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
        };
      };
    };
  };
  /** Delete a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.defaultSupportedIdpConfigs.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        defaultSupportedIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleProtobufEmpty"];
        };
      };
    };
  };
  /** Update a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.defaultSupportedIdpConfigs.patch": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
        defaultSupportedIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
  };
  /** Initialize Identity Platform for a Cloud project. Identity Platform is an end-to-end authentication system for third-party users to access your apps and services. These could include mobile/web apps, games, APIs and beyond. This is the publicly available variant of EnableIdentityPlatform that is only available to billing-enabled projects. */
  "identitytoolkit.projects.identityPlatform.initializeAuth": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InitializeIdentityPlatformRequest"];
      };
    };
  };
  /** List all inbound SAML configurations for an Identity Toolkit project. */
  "identitytoolkit.projects.inboundSamlConfigs.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of items to return. */
        pageSize?: number;
        /** The next_page_token value returned from a previous List request, if any. */
        pageToken?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse"];
        };
      };
    };
  };
  /** Create an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.inboundSamlConfigs.create": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The id to use for this config. */
        inboundSamlConfigId?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
  };
  /** Retrieve an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.inboundSamlConfigs.get": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        inboundSamlConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
        };
      };
    };
  };
  /** Delete an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.inboundSamlConfigs.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        inboundSamlConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleProtobufEmpty"];
        };
      };
    };
  };
  /** Update an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.inboundSamlConfigs.patch": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The update mask applies to the resource. Empty update mask will result in updating nothing. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
        inboundSamlConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
  };
  /** List all Oidc Idp configurations for an Identity Toolkit project. */
  "identitytoolkit.projects.oauthIdpConfigs.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of items to return. */
        pageSize?: number;
        /** The next_page_token value returned from a previous List request, if any. */
        pageToken?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse"];
        };
      };
    };
  };
  /** Create an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.oauthIdpConfigs.create": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The id to use for this config. */
        oauthIdpConfigId?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
  };
  /** Retrieve an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.oauthIdpConfigs.get": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        oauthIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
        };
      };
    };
  };
  /** Delete an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.oauthIdpConfigs.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        oauthIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleProtobufEmpty"];
        };
      };
    };
  };
  /** Update an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.oauthIdpConfigs.patch": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The update mask applies to the resource. Empty update mask will result in updating nothing. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
        oauthIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
  };
  /** List tenants under the given agent project. Requires read permission on the Agent project. */
  "identitytoolkit.projects.tenants.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of results to return, capped at 1000. If not specified, the default value is 20. */
        pageSize?: number;
        /** The pagination token from the response of a previous request. */
        pageToken?: string;
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListTenantsResponse"];
        };
      };
    };
  };
  /** Create a tenant. Requires write permission on the Agent project. */
  "identitytoolkit.projects.tenants.create": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Tenant"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2Tenant"];
  };
  /** Get a tenant. Requires read permission on the Tenant resource. */
  "identitytoolkit.projects.tenants.get": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Tenant"];
        };
      };
    };
  };
  /** Delete a tenant. Requires write permission on the Agent project. */
  "identitytoolkit.projects.tenants.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleProtobufEmpty"];
        };
      };
    };
  };
  /** Update a tenant. Requires write permission on the Tenant resource. */
  "identitytoolkit.projects.tenants.patch": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** If provided, only update fields set in the update mask. Otherwise, all settable fields will be updated. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2Tenant"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2Tenant"];
  };
  /** Gets the access control policy for a resource. An error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Caller must have the right Google IAM permission on the resource. */
  "identitytoolkit.projects.tenants.getIamPolicy": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleIamV1Policy"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleIamV1GetIamPolicyRequest"];
      };
    };
  };
  /** Sets the access control policy for a resource. If the policy exists, it is replaced. Caller must have the right Google IAM permission on the resource. */
  "identitytoolkit.projects.tenants.setIamPolicy": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleIamV1Policy"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleIamV1SetIamPolicyRequest"];
      };
    };
  };
  /** Returns the caller's permissions on a resource. An error is returned if the resource does not exist. A caller is not required to have Google IAM permission to make this request. */
  "identitytoolkit.projects.tenants.testIamPermissions": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleIamV1TestIamPermissionsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleIamV1TestIamPermissionsRequest"];
      };
    };
  };
  /** List all default supported Idp configurations for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of items to return. */
        pageSize?: number;
        /** The next_page_token value returned from a previous List request, if any. */
        pageToken?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse"];
        };
      };
    };
  };
  /** Create a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.create": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The id of the Idp to create a config for. Call ListDefaultSupportedIdps for list of all default supported Idps. */
        idpId?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
  };
  /** Retrieve a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.get": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        defaultSupportedIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
        };
      };
    };
  };
  /** Delete a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        defaultSupportedIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleProtobufEmpty"];
        };
      };
    };
  };
  /** Update a default supported Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.defaultSupportedIdpConfigs.patch": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        defaultSupportedIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig"];
  };
  /** List all inbound SAML configurations for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.inboundSamlConfigs.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of items to return. */
        pageSize?: number;
        /** The next_page_token value returned from a previous List request, if any. */
        pageToken?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse"];
        };
      };
    };
  };
  /** Create an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.inboundSamlConfigs.create": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The id to use for this config. */
        inboundSamlConfigId?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
  };
  /** Retrieve an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.inboundSamlConfigs.get": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        inboundSamlConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
        };
      };
    };
  };
  /** Delete an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.inboundSamlConfigs.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        inboundSamlConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleProtobufEmpty"];
        };
      };
    };
  };
  /** Update an inbound SAML configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.inboundSamlConfigs.patch": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The update mask applies to the resource. Empty update mask will result in updating nothing. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        inboundSamlConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2InboundSamlConfig"];
  };
  /** List all Oidc Idp configurations for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.oauthIdpConfigs.list": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The maximum number of items to return. */
        pageSize?: number;
        /** The next_page_token value returned from a previous List request, if any. */
        pageToken?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse"];
        };
      };
    };
  };
  /** Create an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.oauthIdpConfigs.create": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The id to use for this config. */
        oauthIdpConfigId?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
  };
  /** Retrieve an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.oauthIdpConfigs.get": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        oauthIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
        };
      };
    };
  };
  /** Delete an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.oauthIdpConfigs.delete": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        oauthIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleProtobufEmpty"];
        };
      };
    };
  };
  /** Update an Oidc Idp configuration for an Identity Toolkit project. */
  "identitytoolkit.projects.tenants.oauthIdpConfigs.patch": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
        /** The update mask applies to the resource. Empty update mask will result in updating nothing. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
        updateMask?: string;
      };
      path: {
        targetProjectId: string;
        tenantId: string;
        oauthIdpConfigsId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
        };
      };
    };
    requestBody: components["requestBodies"]["GoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig"];
  };
  /** The Token Service API lets you exchange either an ID token or a refresh token for an access token and a new refresh token. You can use the access token to securely call APIs that require user authorization. */
  "securetoken.token": {
    parameters: {
      query: {
        /** OAuth access token. */
        access_token?: components["parameters"]["access_token"];
        /** Data format for response. */
        alt?: components["parameters"]["alt"];
        /** JSONP */
        callback?: components["parameters"]["callback"];
        /** Selector specifying which fields to include in a partial response. */
        fields?: components["parameters"]["fields"];
        /** OAuth 2.0 token for the current user. */
        oauth_token?: components["parameters"]["oauth_token"];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: components["parameters"]["prettyPrint"];
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: components["parameters"]["quotaUser"];
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: components["parameters"]["uploadType"];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: components["parameters"]["upload_protocol"];
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "*/*": components["schemas"]["GrantTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GrantTokenRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GrantTokenRequest"];
      };
    };
  };
  /** Remove all accounts in the project, regardless of state. */
  "emulator.projects.accounts.delete": {
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the accounts belong to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  /** Get emulator-specific configuration for the project. */
  "emulator.projects.config.get": {
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the config belongs to. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["EmulatorV1ProjectsConfig"];
        };
      };
    };
  };
  /** Update emulator-specific configuration for the project. */
  "emulator.projects.config.update": {
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the config belongs to. */
        targetProjectId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["EmulatorV1ProjectsConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmulatorV1ProjectsConfig"];
      };
    };
  };
  /** List all pending confirmation codes for the project. */
  "emulator.projects.oobCodes.list": {
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the confirmation codes belongs to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["EmulatorV1ProjectsOobCodes"];
        };
      };
    };
  };
  /** List all pending phone verification codes for the project. */
  "emulator.projects.verificationCodes.list": {
    parameters: {
      path: {
        /** The ID of the Google Cloud project that the verification codes belongs to. */
        targetProjectId: string;
        /** The ID of the Identity Platform tenant the accounts belongs to. If not specified, accounts on the Identity Platform project are returned. */
        tenantId: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["EmulatorV1ProjectsOobCodes"];
        };
      };
    };
  };
}

export interface external {}
