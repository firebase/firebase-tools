import * as mockfs from "mock-fs";
import { expect } from "chai";
import {
  extractAppIdentifiersFlutter,
  extractAppIdentifierIos,
  extractAppIdentifiersAndroid,
  Platform,
  getPlatformsFromFolder,
  detectApps,
  App,
} from "./appUtils";

const FLUTTER_CONFIG = `
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'FAKE_WEB_API_KEY',
    appId: '1:123456789012:web:abcdef1234567890abcdef',
    messagingSenderId: '123456789012',
    projectId: 'fake-project-web',
    authDomain: 'fake-project-web.firebaseapp.com',
    storageBucket: 'fake-project-web.firebasestorage.app',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'FAKE_ANDROID_API_KEY',
    appId: '1:123456789012:android:abcdef1234567890abcdef',
    messagingSenderId: '123456789012',
    projectId: 'fake-project-android',
    storageBucket: 'fake-project-android.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'FAKE_IOS_API_KEY',
    appId: '1:123456789012:ios:abcdef1234567890abcdef',
    messagingSenderId: '123456789012',
    projectId: 'fake-project-ios',
    storageBucket: 'fake-project-ios.firebasestorage.app',
    iosBundleId: 'com.example.fakeTestsFlutter',
  );
}
`;

const IOS_CONFIG_1 = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>API_KEY</key>
        <string>FAKE_API_KEY</string>
        <key>GCM_SENDER_ID</key>
        <string>FAKE_GCM_SENDER_ID</string>
        <key>PLIST_VERSION</key>
        <string>1</string>
        <key>BUNDLE_ID</key>
        <string>com.fake.ios.app</string>
        <key>PROJECT_ID</key>
        <string>fake-project-id</string>
        <key>STORAGE_BUCKET</key>
        <string>fake-project-id.firebasestorage.app</string>
        <key>IS_ADS_ENABLED</key>
        <false/>
        <key>IS_ANALYTICS_ENABLED</key>
        <false/>
        <key>IS_APPINVITE_ENABLED</key>
        <true/>
        <key>IS_GCM_ENABLED</key>
        <true/>
        <key>IS_SIGNIN_ENABLED</key>
        <true/>
        <key>GOOGLE_APP_ID</key>
        <string>1:123456789012:ios:abcdef1234567890abcdef</string>
</dict>
</plist>`;

const IOS_CONFIG_2 = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>API_KEY</key>
        <string>FAKE_API_KEY</string>
        <key>GCM_SENDER_ID</key>
        <string>FAKE_GCM_SENDER_ID</string>
        <key>PLIST_VERSION</key>
        <string>1</string>
        <key>BUNDLE_ID</key>
        <string>com.fake.ios.app.debug</string>
        <key>PROJECT_ID</key>
        <string>fake-project-id-debug</string>
        <key>STORAGE_BUCKET</key>
        <string>fake-project-id.firebasestorage.app</string>
        <key>IS_ADS_ENABLED</key>
        <false/>
        <key>IS_ANALYTICS_ENABLED</key>
        <false/>
        <key>IS_APPINVITE_ENABLED</key>
        <true/>
        <key>IS_GCM_ENABLED</key>
        <true/>
        <key>IS_SIGNIN_ENABLED</key>
        <true/>
        <key>GOOGLE_APP_ID</key>
        <string>1:123456789012:ios:abcdef0987654321abcdef</string>
</dict>
</plist>`;

const ANDROID_CONFIG_1 = `
{
    "project_info": {
    "project_number": "FAKE_PROJECT_NUMBER",
    "project_id": "fake-project-android",
    "storage_bucket": "fake-project-android.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:123456789012:android:fakeapp1id",
        "android_client_info": {
          "package_name": "com.fake.app1"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "FAKE_API_KEY_1"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}`;

const ANDROID_CONFIG_2 = `
{
    "project_info": {
    "project_number": "FAKE_PROJECT_NUMBER",
    "project_id": "fake-project-android",
    "storage_bucket": "fake-project-android.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:123456789012:android:fakeapp2id",
        "android_client_info": {
          "package_name": "com.fake.app1.debug"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "FAKE_API_KEY_2"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}`;

const ANDROID_CONFIG_COMBINED = `{
  "project_info": {
    "project_number": "FAKE_PROJECT_NUMBER",
    "project_id": "fake-project-android",
    "storage_bucket": "fake-project-android.firebasestorage.app"
  },
  "client": [
    {
      "client_info": {
        "mobilesdk_app_id": "1:123456789012:android:fakeapp1id",
        "android_client_info": {
          "package_name": "com.fake.app1"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "FAKE_API_KEY_1"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    },
    {
      "client_info": {
        "mobilesdk_app_id": "1:123456789012:android:fakeapp2id",
        "android_client_info": {
          "package_name": "com.fake.app1.debug"
        }
      },
      "oauth_client": [],
      "api_key": [
        {
          "current_key": "FAKE_API_KEY_2"
        }
      ],
      "services": {
        "appinvite_service": {
          "other_platform_oauth_client": []
        }
      }
    }
  ],
  "configuration_version": "1"
}`;

function cleanUndefinedFields(apps: App[]): App[] {
  return apps.map((app) => {
    const leanApp = Object.fromEntries(
      Object.entries(app).filter((entry) => entry[1] !== undefined),
    ) as App;
    return leanApp;
  });
}

describe("appUtils", () => {
  describe("getPlatformsFromFolder", () => {
    const testDir = "test-dir";

    afterEach(() => {
      mockfs.restore();
    });

    it("should return WEB if package.json exists", async () => {
      mockfs({ [testDir]: { "package.json": "{}" } });
      const platforms = await getPlatformsFromFolder(testDir);
      expect(platforms).to.have.deep.members([Platform.WEB]);
    });

    it("should return ANDROID if src/main exists", async () => {
      mockfs({
        [testDir]: { src: { main: {} } },
      });
      const platforms = await getPlatformsFromFolder(testDir);
      expect(platforms).to.have.deep.members([Platform.ANDROID]);
    });

    it("should return IOS if .xcodeproj exists", async () => {
      mockfs({
        [testDir]: { "a.xcodeproj": {} },
      });
      const platforms = await getPlatformsFromFolder(testDir);
      expect(platforms).to.have.deep.members([Platform.IOS]);
    });

    it("should return FLUTTER if pubspec.yaml exists", async () => {
      mockfs({
        [testDir]: { "pubspec.yaml": "name: test" },
      });
      const platforms = await getPlatformsFromFolder(testDir);
      expect(platforms).to.have.deep.members([Platform.FLUTTER]);
    });

    it("should return FLUTTER and WEB if both identifiers exist", async () => {
      mockfs({ [testDir]: { "package.json": "{}", "pubspec.yaml": "name: test" } });
      const platforms = await getPlatformsFromFolder(testDir);
      expect(platforms).to.have.deep.members([Platform.FLUTTER, Platform.WEB]);
    });

    it("should return an empty array if no identifiers exist", async () => {
      mockfs({ [testDir]: {} });
      const platforms = await getPlatformsFromFolder(testDir);
      expect(platforms).to.be.empty;
    });
  });

  describe("detectApps", () => {
    const testDir = "test-dir";

    afterEach(() => {
      mockfs.restore();
    });

    it("should detect a web app", async () => {
      mockfs({ [testDir]: { "package.json": "{}" } });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.WEB,
          directory: ".",
          frameworks: [],
        },
      ]);
    });

    it("should detect an android app", async () => {
      mockfs({ [testDir]: { src: { main: {} } } });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.ANDROID,
          directory: ".",
        },
      ]);
    });

    it("should detect an android app with Firebase", async () => {
      mockfs({
        [testDir]: {
          src: { main: {} },
          "google-services.json": ANDROID_CONFIG_1,
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.ANDROID,
          directory: ".",
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
      ]);
    });

    it("should detect an android app with a suffix", async () => {
      mockfs({
        [testDir]: {
          src: { main: {} },
          "google-services.json.example": ANDROID_CONFIG_1,
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.ANDROID,
          directory: ".",
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
      ]);
    });

    it("should detect an android app with extra words", async () => {
      mockfs({
        [testDir]: {
          src: { main: {} },
          "google-services-example.json": ANDROID_CONFIG_1,
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.ANDROID,
          directory: ".",
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
      ]);
    });

    it("should detect android app with multiple variants", async () => {
      mockfs({
        [testDir]: {
          src: {
            main: {},
            release: {
              "google-services.json": ANDROID_CONFIG_1,
            },
            debug: {
              "google-services.json": ANDROID_CONFIG_2,
            },
          },
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.ANDROID,
          directory: ".",
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
        {
          platform: Platform.ANDROID,
          directory: ".",
          appId: "1:123456789012:android:fakeapp2id",
          bundleId: "com.fake.app1.debug",
        },
      ]);
    });

    it("should detect android app with multiple app ids in the same file", async () => {
      mockfs({
        [testDir]: {
          src: { main: {} },
          "google-services.json": ANDROID_CONFIG_COMBINED,
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.ANDROID,
          directory: ".",
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
        {
          platform: Platform.ANDROID,
          directory: ".",
          appId: "1:123456789012:android:fakeapp2id",
          bundleId: "com.fake.app1.debug",
        },
      ]);
    });

    it("should detect an ios app", async () => {
      mockfs({
        [testDir]: {
          "a.xcodeproj": {},
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.IOS,
          directory: ".",
        },
      ]);
    });

    it("should detect an ios app with Firebase", async () => {
      mockfs({
        [testDir]: {
          "a.xcodeproj": {},
          "GoogleService-Info.plist": IOS_CONFIG_1,
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.IOS,
          directory: ".",
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.fake.ios.app",
        },
      ]);
    });

    it("should detect an ios app with different suffix", async () => {
      mockfs({
        [testDir]: {
          "a.xcodeproj": {},
          "GoogleService-Info.plist.example": IOS_CONFIG_1,
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.IOS,
          directory: ".",
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.fake.ios.app",
        },
      ]);
    });

    it("should detect an ios app replacing Info", async () => {
      mockfs({
        [testDir]: {
          "a.xcodeproj": {},
          "GoogleService-Prod.plist": IOS_CONFIG_1,
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.IOS,
          directory: ".",
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.fake.ios.app",
        },
      ]);
    });

    it("should detect an ios app with multiple plist files", async () => {
      mockfs({
        [testDir]: {
          "a.xcodeproj": {},
          Configs: {
            Dev: {
              "GoogleService-Info.plist": IOS_CONFIG_1,
            },
            Prod: {
              "GoogleService-Info.plist": IOS_CONFIG_2,
            },
          },
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.IOS,
          directory: ".",
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.fake.ios.app",
        },
        {
          platform: Platform.IOS,
          directory: ".",
          appId: "1:123456789012:ios:abcdef0987654321abcdef",
          bundleId: "com.fake.ios.app.debug",
        },
      ]);
    });

    it("should detect a flutter app", async () => {
      mockfs({
        [testDir]: { "pubspec.yaml": "name: test" },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.FLUTTER,
          directory: ".",
        },
      ]);
    });

    it("should detect a flutter app with Firebase", async () => {
      mockfs({
        [testDir]: {
          "pubspec.yaml": "name: test",
          lib: { "firebase_options.dart": FLUTTER_CONFIG },
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.FLUTTER,
          directory: ".",
          appId: "1:123456789012:web:abcdef1234567890abcdef",
        },
        {
          platform: Platform.FLUTTER,
          directory: ".",
          appId: "1:123456789012:android:abcdef1234567890abcdef",
        },
        {
          platform: Platform.FLUTTER,
          directory: ".",
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.example.fakeTestsFlutter",
        },
      ]);
    });
    it("should detect multiple apps", async () => {
      mockfs({
        [testDir]: {
          web: { "package.json": "{}" },
          android: {
            src: { main: {} },
            "google-services.json": ANDROID_CONFIG_1,
          },
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.WEB,
          directory: `web`,
          frameworks: [],
        },
        {
          platform: Platform.ANDROID,
          directory: `android`,
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
      ]);
    });

    it("should detect the react framework", async () => {
      mockfs({
        [testDir]: {
          "package.json": JSON.stringify({
            dependencies: {
              react: "1.0.0",
            },
          }),
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.WEB,
          directory: ".",
          frameworks: ["react"],
        },
      ]);
    });

    it("should detect angular web framework", async () => {
      mockfs({
        [testDir]: {
          "package.json": JSON.stringify({
            dependencies: {
              "@angular/core": "1.0.0",
            },
          }),
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.WEB,
          directory: ".",
          frameworks: ["angular"],
        },
      ]);
    });

    it("should detect the next framework", async () => {
      mockfs({
        [testDir]: {
          "package.json": JSON.stringify({
            dependencies: {
              next: "1.0.0",
            },
          }),
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.WEB,
          directory: ".",
          frameworks: ["react"],
        },
      ]);
    });

    it("should detect the angular framework", async () => {
      mockfs({
        [testDir]: {
          "package.json": JSON.stringify({
            dependencies: {
              "@angular/core": "1.0.0",
            },
          }),
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.WEB,
          directory: ".",
          frameworks: ["angular"],
        },
      ]);
    });

    it("should detect a nested web app", async () => {
      mockfs({
        [testDir]: {
          web: {
            frontend: { "package.json": "{}" },
          },
        },
      });
      const apps = cleanUndefinedFields(await detectApps(testDir));
      expect(apps).to.have.deep.members([
        {
          platform: Platform.WEB,
          directory: "web/frontend",
          frameworks: [],
        },
      ]);
    });

    it("should detect multiple top-level and nested apps", async () => {
      mockfs({
        [testDir]: {
          web: {
            "package.json": "{}",
          },
          android: {
            src: { main: {} },
            "google-services.json": ANDROID_CONFIG_1,
          },
          ios: {
            "a.xcodeproj": {},
            "GoogleService-Info.plist": IOS_CONFIG_1,
          },
        },
      });

      const apps = cleanUndefinedFields(await detectApps(testDir));
      const expected = [
        {
          platform: Platform.ANDROID,
          directory: "android",
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
        {
          platform: Platform.IOS,
          directory: "ios",
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.fake.ios.app",
        },
        {
          platform: Platform.WEB,
          directory: "web",
          frameworks: [],
        },
      ];
      expect(apps).to.have.deep.members(expected);
    });
  });

  describe("extractAppIdentifiers", () => {
    it("should extract all app IDs and bundle IDs from a firebase_options.dart file", () => {
      const expectedIdentifiers = [
        {
          appId: "1:123456789012:web:abcdef1234567890abcdef",
          bundleId: undefined,
        },
        {
          appId: "1:123456789012:android:abcdef1234567890abcdef",
          bundleId: undefined,
        },
        {
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.example.fakeTestsFlutter",
        },
      ];

      const result = extractAppIdentifiersFlutter(FLUTTER_CONFIG);
      expect(result).to.deep.equal(expectedIdentifiers);
    });

    it("should extract the GOOGLE_APP_ID and BUNDLE_ID from a GoogleService-Info.plist file", () => {
      const expectedIdentifier = [
        {
          appId: "1:123456789012:ios:abcdef1234567890abcdef",
          bundleId: "com.fake.ios.app",
        },
      ];

      const result = extractAppIdentifierIos(IOS_CONFIG_1);
      expect(result).to.deep.equal(expectedIdentifier);
    });

    it("should extract all mobilesdk_app_id and package_name from a google-services.json file", () => {
      const expectedIdentifiers = [
        {
          appId: "1:123456789012:android:fakeapp1id",
          bundleId: "com.fake.app1",
        },
        {
          appId: "1:123456789012:android:fakeapp2id",
          bundleId: "com.fake.app1.debug",
        },
      ];

      const result = extractAppIdentifiersAndroid(ANDROID_CONFIG_COMBINED);
      expect(result).to.deep.equal(expectedIdentifiers);
    });
  });
});
